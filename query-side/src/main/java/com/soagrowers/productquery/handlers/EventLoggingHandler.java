package com.soagrowers.productquery.handlers;

import com.soagrowers.productevents.events.ProductAddedEvent;
import com.soagrowers.productevents.events.ProductSaleableEvent;
import com.soagrowers.productevents.events.ProductUnsaleableEvent;
import org.axonframework.eventhandling.annotation.EventHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * is a Spring-based component that handles various product-related events such as
 * ProductAddedEvent, ProductSaleableEvent, and ProductUnsaleableEvent. The class
 * logs the event details, including the instance ID, event class name, and event ID,
 * using the SLF4J logger.
 */
@Component
public class EventLoggingHandler {

    private static final Logger LOG = LoggerFactory.getLogger(EventLoggingHandler.class);

    @Value("${spring.application.index}")
    private Integer indexId;

    /**
     * logs information to the log when a `ProductAddedEvent` is triggered.
     * 
     * @param event ProductAddedEvent that triggered the function execution, providing
     * the class name and ID of the event, as well as the event name.
     * 
     * 	- `indexId`: An integer representing the index of the event in the handling
     * method's argument list.
     * 	- `event.getClass().getSimpleName()`: The simple name of the class that `event`
     * belongs to.
     * 	- `event.getId()`: An integer representing the unique identifier of the event.
     * 	- `event.getName()`: A string representing the human-readable name of the event.
     */
    @EventHandler
    public void handle(ProductAddedEvent event) {
        LOG.debug("Instance:[{}] Event:{} Id:{} Name:'{}'", indexId, event.getClass().getSimpleName(), event.getId(), event.getName());
    }

    /**
     * within the `@EventHandler` annotation listens to the `ProductSaleableEvent` and
     * logs the event details, including the instance ID and event class name.
     * 
     * @param event ProductSaleableEvent object that was generated by an event listener
     * and is passed to the `handle()` method for processing.
     * 
     * 	- `indexId`: A unique identifier for this event instance.
     * 	- `event`: The type of event being handled (e.g., "ProductSaleableEvent").
     * 	- `id`: A specific ID assigned to this event instance.
     */
    @EventHandler
    public void handle(ProductSaleableEvent event) {
        LOG.debug("Instance:[{}] Event:{} Id:{}", indexId, event.getClass().getSimpleName(), event.getId());
    }

    /**
     * is called when an event indicating a product is unsaleable occurs. It logs information
     * about the event, including the class name and ID.
     * 
     * @param event ProductUnsaleableEvent that triggered the function execution.
     * 
     * 	- `LOG`: This is an instance of a class that represents a log4j logger. It allows
     * for logging messages to be sent to the console or other output streams.
     * 	- `indexId`: This is an integer value representing the index of the event in question.
     * 	- `event`: This is a deserialized object representing the `ProductUnsaleableEvent`
     * class. Its properties can be accessed and used as needed.
     */
    @EventHandler
    public void handle(ProductUnsaleableEvent event) {
        LOG.debug("Instance:[{}] Event:{} Id:{}", indexId, event.getClass().getSimpleName(), event.getId());
    }
}






