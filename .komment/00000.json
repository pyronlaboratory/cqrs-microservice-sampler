[
  {
    "name": "ProductRestControllerParamValidityTest.java",
    "path": "command-side/src/test/java/com/soagrowers/productcommand/ProductRestControllerParamValidityTest.java",
    "content": {
      "structured": {
        "description": "A ProductRestController class with multiple test methods for testing its add method. The controller uses Axon Framework's CommandGateway to send a product addition command to a mock HTTP server. The tests verify that the add method correctly handles good request parameters, assertion errors, and bad request parameters. The tests also check that the add method sends the command to the gateway and returns the appropriate HTTP status code.",
        "items": [
          {
            "id": "ee12794f-39d9-dabe-ba43-82f50793f119",
            "ancestors": [],
            "type": "function",
            "description": "tests various scenarios for adding products to the system, including successful requests with valid data and failed requests due to AssertionError or CommandExecutionException. The class also verifies that bad request parameters result in a BAD_REQUEST status code.",
            "name": "ProductRestControllerParamValidityTest",
            "location": {
              "start": 23,
              "insert": 20,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 19,
                "end": 22
              }
            },
            "item_type": "class",
            "length": 75,
            "docLength": 3
          },
          {
            "id": "be1e19da-7327-a3a7-7741-1f997330006f",
            "ancestors": [
              "ee12794f-39d9-dabe-ba43-82f50793f119"
            ],
            "type": "function",
            "description": "initializes various components and sets up mock objects for testing purposes, including the `ProductRestController`, `MockHttpServletResponse`, and enables assertions for testing.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n        Asserts.INSTANCE.setAssertsTo(true);\n        controller = new ProductRestController();\n        mockHttpServletResponse = new MockHttpServletResponse();\n    }\n",
              "description": ""
            },
            "name": "setup",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "538e8ed0-02fa-de80-344e-99364c23ef17",
            "ancestors": [
              "ee12794f-39d9-dabe-ba43-82f50793f119"
            ],
            "type": "function",
            "description": "tests the `add` method of a controller by providing valid parameters and verifying that the expected HTTP status code is returned.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testAddWithGoodRequestParams() {\n    // Arrange\n    controller.commandGateway = gateway; //cheating a bit here, but mocking all the axon framework's beans is a pain.\n    when(gateway.sendAndWait(any())).thenReturn(null);\n\n    //Act\n    controller.add(UUID.randomUUID().toString(), \"Test Add Product\", mockHttpServletResponse);\n\n    //Assert\n    verify(gateway).sendAndWait(any());\n    assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_CREATED);\n}\n",
              "description": ""
            },
            "name": "testAddWithGoodRequestParams",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "de4fa86f-bdb1-d983-2c4a-c93920e72418",
            "ancestors": [
              "ee12794f-39d9-dabe-ba43-82f50793f119"
            ],
            "type": "function",
            "description": "tests the controller's `add` method by mocking the gateway's `sendAndWait` method to throw an AssertionError. The function verifies that the response status code is 400 Bad Request when the add operation fails.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testFailedAddWithAssertionError() {\n        // Arrange\n        controller.commandGateway = gateway; //cheating a bit here, but mocking all the axon framework's beans is a pain.\n        when(gateway.sendAndWait(any())).thenThrow(AssertionError.class);\n\n        //Act\n        controller.add(UUID.randomUUID().toString(), \"Test Add Product\", mockHttpServletResponse);\n\n        //Assert\n        verify(gateway).sendAndWait(any());\n        assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST);\n    }\n",
              "description": ""
            },
            "name": "testFailedAddWithAssertionError",
            "location": {
              "start": 53,
              "insert": 53,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "f0795d83-88c4-b487-2c43-961395be1562",
            "ancestors": [
              "ee12794f-39d9-dabe-ba43-82f50793f119"
            ],
            "type": "function",
            "description": "tests the `add` method of a controller by throwing a `CommandExecutionException` when sending the command to the gateway, and verifying that the response status code is `HttpServletResponse.SC_BAD_REQUEST`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testFailedAddWithCommandExecutionException() {\n    // Arrange\n    controller.commandGateway = gateway; //cheating a bit here, but mocking all the axon framework's beans is a pain.\n    when(gateway.sendAndWait(any())).thenThrow(CommandExecutionException.class);\n\n    //Act\n    controller.add(UUID.randomUUID().toString(), \"Test Add Product\", mockHttpServletResponse);\n\n    //Assert\n    verify(gateway).sendAndWait(any());\n    assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST);\n}\n",
              "description": "\nThis test would check if the method add throws a CommandExecutionException and if so, set the status of the response to 400 bad request."
            },
            "name": "testFailedAddWithCommandExecutionException",
            "location": {
              "start": 67,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "73e45ae7-9edd-379f-8f47-7be870aed1ef",
            "ancestors": [
              "ee12794f-39d9-dabe-ba43-82f50793f119"
            ],
            "type": "function",
            "description": "tests the add method of a controller by providing invalid input parameters, ensuring that the method returns a BAD_REQUEST status response.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testAddWithBadRequestParams() {\n\n        controller.add(null, null, mockHttpServletResponse);\n        assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST);\n\n        controller.add(UUID.randomUUID().toString(), null, new MockHttpServletResponse());\n        assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST);\n\n        controller.add(UUID.randomUUID().toString(), \"\", new MockHttpServletResponse());\n        assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST);\n\n        controller.add(\"\", \"\", new MockHttpServletResponse());\n        assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST);\n\n    }\n",
              "description": "\nThe testAddWithBadRequestParams method is a unit test that checks whether the add method responds with status code 400 (bad request) when given bad parameters (e.g., null or empty string). The test first calls the add method with null and null as input, then with a random UUID and null as input, then with a random UUID and an empty string as input, and finally with two empty strings as input. For each of these calls, it checks whether the response status is 400 using assertTrue(mockHttpServletResponse.getStatus() == HttpServletResponse.SC_BAD_REQUEST)."
            },
            "name": "testAddWithBadRequestParams",
            "location": {
              "start": 81,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "DiscoveryServiceApplication.java",
    "path": "discovery-service/src/main/java/com/soagrowers/DiscoveryServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables Eureka server functionality and starts an instance of the `DiscoveryService` class. The `main` method launches the application with the `SpringApplication.run()` method, passing in the class name and command-line arguments.",
        "items": [
          {
            "id": "7b4e2944-eb9b-91b1-b843-9750d9996ea8",
            "ancestors": [],
            "type": "function",
            "description": "is an Spring Boot application that enables Eureka server functionality and provides the main entry point for the application.",
            "name": "DiscoveryServiceApplication",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "c0e8d9e1-f7f5-28bb-a141-7dee4962ab8f",
            "ancestors": [
              "7b4e2944-eb9b-91b1-b843-9750d9996ea8"
            ],
            "type": "function",
            "description": "starts the discovery service application by running the `SpringApplication.run()` method with the `DiscoveryServiceApplication` class as its argument and the `args` array as its parameter.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "1 or more command line arguments passed to the `SpringApplication.run()` method when invoking the `main()` function.\n\n* It is an array of strings representing command-line arguments passed to the application.\n* The length of the array `args` can vary depending on the number and types of arguments provided by the user.\n* Each element in the array can hold a different value, such as a command-line option or parameter.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ReadOnlyPagingAndSortingRepository.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/repository/ReadOnlyPagingAndSortingRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a read-only paging and sorting repository, which extends the functionality of Spring Data's PagingAndSortingRepository interface. The interface provides methods for saving and deleting entities of type Product, with the delete method taking either a string or an entity parameter. Additionally, the interface marks some of its methods as @RestResource(exported = false) to restrict their availability.",
        "items": [
          {
            "id": "a5dabf04-9709-a895-9347-86ceb7e999d3",
            "ancestors": [],
            "type": "function",
            "description": "offers save and delete methods for Product entities with restrictions on the capabilities offered through the use of exported = false annotations in the RestResource annotations.",
            "name": "ReadOnlyPagingAndSortingRepository",
            "location": {
              "start": 12,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 8,
                "end": 11
              }
            },
            "item_type": "interface",
            "length": 16,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "Application.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/Application.java",
    "content": {
      "structured": {
        "description": "An application with several components:\n\n* A Spring Boot Application that enables Eureka client functionality for service discovery and registration.\n* A REST controller for retrieving a list of service instances by application name using DiscoveryClient.\n* Another REST controller for retrieving a message stored in the application's configuration using a Value annotation.",
        "items": [
          {
            "id": "d25ede1b-be3e-5f89-fc4a-98f9f34779b1",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Eureka client functionality and provides a REST controller for service instances. The main method starts the application context using SpringApplication.",
            "name": "Application",
            "location": {
              "start": 20,
              "insert": 17,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 16,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 3
          },
          {
            "id": "ff3fec73-3aaf-2983-f249-921e62bc79f1",
            "ancestors": [
              "d25ede1b-be3e-5f89-fc4a-98f9f34779b1"
            ],
            "type": "function",
            "description": "runs a SpringApplication and starts the application.",
            "params": [],
            "name": "main",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a3a3ad85-62ad-52b2-f142-6adea3581cc1",
            "ancestors": [],
            "type": "function",
            "description": "is a RESTful controller that provides access to service instances by application name. It uses the DiscoveryClient to retrieve a list of service instances associated with a given application name, and returns them in a List format.",
            "name": "ServiceInstanceRestController",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 14,
            "docLength": null
          },
          {
            "id": "53fc3a55-3cbe-2797-fc40-adeed1f26c6c",
            "ancestors": [
              "a3a3ad85-62ad-52b2-f142-6adea3581cc1"
            ],
            "type": "function",
            "description": "retrieves a list of service instances associated with a given application name using the Discovery API provided by the `discoveryClient`.",
            "params": [],
            "returns": {
              "type_name": "ListServiceInstance",
              "description": "a list of Service Instances associated with the specified Application Name.\n\nThe function returns a list of ServiceInstance objects representing the instances of services associated with the given application name. Each instance is described by its ID, display name, and health status. The list provides information about the number of instances available and their current state.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate DiscoveryClient discoveryClient;\n\n@Value(\"${spring.application.name}\")\nprivate String appName;\n\nList<ServiceInstance> instances = this.discoveryClient.getInstances(appName);\n",
              "description": "\nThe method serviceInstancesByApplicationName returns a list of ServiceInstance that match the application name provided, in this case the value of the spring.application.name property."
            },
            "name": "serviceInstancesByApplicationName",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "660dc711-f099-4ab5-cc42-0185e9f7245e",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot REST controller that provides a String message through a GET request. The message is stored in a Spring property file and can be retrieved by sending a request to the `/message` endpoint.",
            "name": "MessageRestController",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 12,
            "docLength": null
          },
          {
            "id": "46e7e78e-7bc7-41b5-584d-432ecd2742e5",
            "ancestors": [
              "660dc711-f099-4ab5-cc42-0185e9f7245e"
            ],
            "type": "function",
            "description": "retrieves and returns a predefined string message.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string containing the message value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@RequestMapping(\"/message\")\n    String getMessage() {\n        return this.message;\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n        MessageRestController controller = new MessageRestController();\n        String message = controller.getMessage();\n        System.out.println(message);\n    }\n",
              "description": "\nThe above code will return a string of the value stored in the variable `message`. The `getMessage` method is called on the `MessageRestController` class, and then the returned value is printed to the console using `System.out.println`."
            },
            "name": "getMessage",
            "location": {
              "start": 52,
              "insert": 52,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductRestController.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/ProductRestController.java",
    "content": {
      "structured": {
        "description": "A REST controller for managing products, specifically adding new products to a database using the Axon Framework's command-handling architecture. The controller handles POST requests to the `/products` endpoint and sends the commands to the `commandGateway` for processing. If the command execution fails, the controller returns a `SC_BAD_REQUEST` status code with a detailed error message.",
        "items": [
          {
            "id": "4e7da722-09a5-258e-844a-6786d7af35bf",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling HTTP POST requests to the /products endpoint, where users can add new products. The controller uses the CommandGateway to send and wait for the AddProductCommand, which adds the product to the database. If any errors occur during the command execution, the controller handles them and sets the appropriate response status code.",
            "name": "ProductRestController",
            "location": {
              "start": 19,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 15,
                "end": 18
              }
            },
            "item_type": "class",
            "length": 40,
            "docLength": 3
          },
          {
            "id": "3e98245a-2b2f-a18a-0f49-bad2af055e1d",
            "ancestors": [
              "4e7da722-09a5-258e-844a-6786d7af35bf"
            ],
            "type": "function",
            "description": "handles a POST request to add a product to the database, validating input parameters and sending a command to the gateway to add the product. If any validation errors occur or if the command execution fails, it returns an appropriate response.",
            "params": [
              {
                "name": "id",
                "type_name": "String",
                "description": "product ID which is used to identify the product being added.",
                "complex_type": false
              },
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the product being added and is required to be provided by the user for the addition to be successful.",
                "complex_type": false
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object, which is used to set the status code and provide additional information to the client in case of an error or success.\n\n* `response`: A `HttpServletResponse` object that provides information about the HTTP request and response. It has various properties such as status code, headers, and query strings.\n* `setStatus(statusCode)`: Sets the status code of the response to the specified value. The status code is a three-digit code that indicates the result of the request. For example, 200 means OK, while 404 means Not Found.\n* `headers`: A collection of headers associated with the response. Each header has a key-value pair that provides additional information about the response.\n* `queryStrings`: An array of query strings associated with the response. Each query string is a string that contains a set of keywords separated by the '=' character, and each keyword has a value associated with it.\n\nIn this function, the `response` object is used to set the status code and headers of the response. The `queryStrings` property is not used in this specific function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Example 1: Adding a product with valid parameters\nString id = \"Product01\";\nString name = \"My Product\";\nHttpServletResponse response = new HttpServletResponse();\nadd(id, name, response);\nLOG.info(\"Added Product [{}] '{}'\", id, name);\nassertEquals(response.getStatus(), HttpServletResponse.SC_CREATED);\n\n// Example 2: Adding a product with invalid parameters (empty ID)\nString id = \"\";\nString name = \"My Product\";\nHttpServletResponse response = new HttpServletResponse();\nadd(id, name, response);\nLOG.warn(\"Add Request failed - empty params?. [{}] '{}'\", id, name);\nassertEquals(response.getStatus(), HttpServletResponse.SC_BAD_REQUEST);\n\n// Example 3: Adding a product with invalid parameters (empty Name)\nString id = \"Product01\";\nString name = \"\";\nHttpServletResponse response = new HttpServletResponse();\nadd(id, name, response);\nLOG.warn(\"Add Request failed - empty params?. [{}] '{}'\", id, name);\nassertEquals(response.getStatus(), HttpServletResponse.SC_BAD_REQUEST);\n\n// Example 4: Adding a product with a duplicate ID (ConcurrencyException)\nString id = \"Product01\";\nString name = \"My Product\";\nHttpServletResponse response = new HttpServletResponse();\nadd(id, name, response);\nLOG.warn(\"Add Command FAILED with Message: {}\", cex.getMessage());\nassertEquals(response.getStatus(), HttpServletResponse.SC_BAD_REQUEST);\n",
              "description": ""
            },
            "name": "add",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 30,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductAggregate.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/aggregates/ProductAggregate.java",
    "content": {
      "structured": {
        "description": "An aggregate root class called ProductAggregate that manages the life cycle of a product. It includes constructors for creating new instances and command-handling methods for handling add, mark saleable, and mark unsaleable commands. Additionally, it includes event sourcing handlers for on(ProductAddedEvent, ProductSaleableEvent, ProductUnsaleableEvent) events. The code also defines a repository interface for storing the aggregate's events in an event store.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productcommand.aggregates.ProductAggregate Pages: 1 -->\n<svg width=\"254pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 254.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.soagrowers.productcommand.aggregates.ProductAggregate</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"246,-30 0,-30 0,0 246,0 246,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productcommand.aggregates.</text>\n<text text-anchor=\"middle\" x=\"123\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAggregate</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"213,-85 33,-85 33,-66 213,-66 213,-85\"/>\n<text text-anchor=\"middle\" x=\"123\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractAnnotatedAggregateRoot</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M123,-55.65C123,-47.36 123,-37.78 123,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"119.5,-55.87 123,-65.87 126.5,-55.87 119.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4b877bd0-adac-3793-f54f-2acb66d7af7d",
            "ancestors": [],
            "type": "function",
            "description": "in Axon handles the management of products, including their unique identifier, name, and saleability status. The class has three constructors: one for the default instance, one for handling the AddProductCommand, and one for handling the MarkProductAsSaleableCommand and MarkProductAsUnsaleableCommand. Additionally, there are event handlers for ProductAddedEvent, ProductSaleableEvent, and ProductUnsaleableEvent to update the product's state based on events raised by the application.",
            "name": "ProductAggregate",
            "location": {
              "start": 35,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 15,
                "end": 34
              }
            },
            "item_type": "class",
            "length": 99,
            "docLength": 19
          },
          {
            "id": "c3e006d1-4dd9-4097-5747-405395f2e526",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "marks a product as saleable based on its current state. If the product is not saleable, it applies an event to make it saleable. Otherwise, it throws an exception indicating that the product is already saleable.",
            "params": [
              {
                "name": "command",
                "type_name": "MarkProductAsSaleableCommand",
                "description": "MarkProductAsSaleableCommand object that triggered the function execution, providing the necessary context for the function to perform its actions.\n\nThe `MarkProductAsSaleableCommand` has an `id` field that represents the product ID.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@CommandHandler\n    public void markSaleable(MarkProductAsSaleableCommand command) {\n        LOG.debug(\"Command: 'MarkProductAsSaleableCommand' received.\");\n        if (!this.isSaleable()) {\n            apply(new ProductSaleableEvent(id));\n        } else {\n            throw new IllegalStateException(\"This ProductAggregate (\" + this.getId() + \") is already Saleable.\");\n        }\n    }\n",
              "description": ""
            },
            "name": "markSaleable",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "e2e4cfd7-e92f-2e93-1446-aaa7701a0965",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "marks a product as unsaleable based on its saleability status, throwing an illegal state exception if it is already off-sale.",
            "params": [
              {
                "name": "command",
                "type_name": "MarkProductAsUnsaleableCommand",
                "description": "`MarkProductAsUnsaleableCommand` message that triggers the function execution.\n\n* The function first logs a message in the debug log stating that the `MarkProductAsUnsaleableCommand` command has been received.\n* If the product is saleable, a new `ProductUnsaleableEvent` object is created and applied to the product using the `apply()` method.\n* If the product is already off-sale, an `IllegalStateException` is thrown with the message \"This ProductAggregate ( id ) is already off-sale.\"",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "MarkProductAsUnsaleableCommand markProductAsUnsaleableCommand = new MarkProductAsUnsaleableCommand(productId);\n// Execute the command using a CommandGateway, CommandBus or any other means of executing commands\n",
              "description": ""
            },
            "name": "markUnsaleable",
            "location": {
              "start": 85,
              "insert": 85,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "da1ea59f-f276-348c-3f4b-7bafd86f894e",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "at `@EventSourcingHandler` processes a `ProductAddedEvent` by assigning the event's `id` and `name` to instance variables, then logs a debug message with the event's ID and name.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductAddedEvent",
                "description": "`ProductAddedEvent` that triggered the event handler, providing the event's ID and name for further processing.\n\n* `id`: A unique identifier for the event, represented by an integer value.\n* `name`: The name of the product added, represented by a string value.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventSourcingHandler\n    public void on(ProductAddedEvent event) {\n        this.id = event.getId();\n        this.name = event.getName();\n        LOG.debug(\"Applied: 'ProductAddedEvent' [{}] '{}'\", event.getId(), event.getName());\n    }\n",
              "description": ""
            },
            "name": "on",
            "location": {
              "start": 103,
              "insert": 95,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 94,
                "end": 102
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 8
          },
          {
            "id": "51a841fb-e644-ac91-474e-7ae3dceeb126",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "updates the `isSaleable` field of an object and logs a message with the ID of the received `ProductSaleableEvent`.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductSaleableEvent",
                "description": "`ProductSaleableEvent` that triggered the event handler method.\n\n* `isSaleable`: A boolean variable representing whether the product is saleable or not. It is set to `true` by this function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventSourcingHandler\n    public void on(ProductSaleableEvent event) {\n        this.isSaleable = true;\n        LOG.debug(\"Applied: 'ProductSaleableEvent' [{}]\", event.getId());\n}\n",
              "description": ""
            },
            "name": "on",
            "location": {
              "start": 110,
              "insert": 110,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "3d851589-71b3-7dbd-f747-6243ff4fa1dc",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "updates the `isSaleable` field of the object to `false` when a `ProductUnsaleableEvent` occurs, and logs the event ID with a debug message.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductUnsaleableEvent",
                "description": "`ProductUnsaleableEvent` object that is being handled by the `on()` method.\n\n* `isSaleable`: A boolean indicating whether the product is saleable or not.\n* `LOG`: An instance of the `Logger` class used for debugging purposes.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventSourcingHandler\npublic void on(ProductUnsaleableEvent event) {\nthis.isSaleable = false;\nLOG.debug(\"Applied: 'ProductUnsaleableEvent' [{}]\", event.getId());\n}\n",
              "description": ""
            },
            "name": "on",
            "location": {
              "start": 116,
              "insert": 116,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "11e72f4f-48a3-51a7-204e-eb4ceb0383eb",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "returns the `id` field of an object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "ProductAggregate product = new ProductAggregate();\nString id = product.getId();\n",
              "description": ""
            },
            "name": "getId",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bd78e23f-6112-bdbc-ef42-99e502ff582f",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "retrieves a string representing the name of an object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the name of the object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "String name = productAggregate.getName();\n",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 126,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "fd5aa744-467e-e5be-ae48-d3d271928645",
            "ancestors": [
              "4b877bd0-adac-3793-f54f-2acb66d7af7d"
            ],
            "type": "function",
            "description": "determines if an item is saleable based on a predefined condition.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the item is saleable or not.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "ProductAggregate product = new ProductAggregate();\nAddProductCommand command = new AddProductCommand(\"123456789\", \"Coffee\");\nproduct.markAsSaleable(command);\nMarkProductAsUnsaleableCommand command = new MarkProductAsUnsaleableCommand(\"123456789\");\nproduct.markAsUnsaleable(command);\n",
              "description": ""
            },
            "name": "isSaleable",
            "location": {
              "start": 130,
              "insert": 130,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AddProductCommand.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/commands/AddProductCommand.java",
    "content": {
      "structured": {
        "description": "An `AddProductCommand` class that represents a command for adding a product to an aggregate root. The class has two fields: `id` and `name`, which are used to identify and label the product respectively. The class also includes methods for getting the `id` and `name` of the product.",
        "items": [
          {
            "id": "c81fb5b7-f2bd-b98b-4846-33b59fb0d0b7",
            "ancestors": [],
            "type": "function",
            "description": "is a Java class that represents an instruction to add a product to an aggregate entity. The class has two instance fields: `id` and `name`, which represent the unique identifier and name of the product, respectively. The class also has two methods: `getId()` and `getName()`, which return the value of the `id` and `name` fields, respectively.",
            "name": "AddProductCommand",
            "location": {
              "start": 8,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 7
              }
            },
            "item_type": "class",
            "length": 19,
            "docLength": 3
          },
          {
            "id": "10857c50-3c05-2fa6-1c48-f5cc3b33f724",
            "ancestors": [
              "c81fb5b7-f2bd-b98b-4846-33b59fb0d0b7"
            ],
            "type": "function",
            "description": "returns the `id` field of an object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `id` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "AddProductCommand command = new AddProductCommand(\"1234\", \"product name\");\nString id = command.getId(); // returns \"1234\"\n",
              "description": ""
            },
            "name": "getId",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8a4ba4dd-ca88-e88b-4a48-5a5f1a635dea",
            "ancestors": [
              "c81fb5b7-f2bd-b98b-4846-33b59fb0d0b7"
            ],
            "type": "function",
            "description": "retrieves the name of an object and returns it as a string.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representation of the variable `name`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Product{\n  private String id;\n  private String name;\n  \n  public Product(String id, String name) {\n    this.id = id;\n    this.name = name;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public String getName() {\n    return name;\n  }\n}\n",
              "description": "\nThe code above shows a class named Product with two fields, id and name. The class also has a constructor that takes in two parameters, which are used to set the values of the two fields. Additionally, it has a method called setName which sets the value of the field name, and getName which returns the current value of the field name.\nThe example below shows how the method getName can be used:\n"
            },
            "name": "getName",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "MarkProductAsSaleableCommand.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/commands/MarkProductAsSaleableCommand.java",
    "content": {
      "structured": {
        "description": "A class called `MarkProductAsSaleableCommand` that handles marking a product as saleable. The class has a constructor that takes in an `id` field, which is used by Axon to identify the correct aggregate to update. The `getId()` method returns the value of the `id` field.",
        "items": [
          {
            "id": "781576dc-99f7-5f81-9b4c-b78400e90ee4",
            "ancestors": [],
            "type": "function",
            "description": "is a Java class that enables Axon to identify the appropriate aggregate to mark as completed based on the Id field annotated with the TargetAggregateIdentifier annotation. The class has a constructor and a getId() method for retrieving the Id value.",
            "name": "MarkProductAsSaleableCommand",
            "location": {
              "start": 8,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 7
              }
            },
            "item_type": "class",
            "length": 24,
            "docLength": 3
          },
          {
            "id": "d98c51e8-f53e-6abb-354b-a2b775c042a7",
            "ancestors": [
              "781576dc-99f7-5f81-9b4c-b78400e90ee4"
            ],
            "type": "function",
            "description": "returns the `id` field of a class, providing an easy way to access and retrieve the value of this instance variable.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "import com.soagrowers.productcommand.commands.MarkProductAsSaleableCommand;\n\n// Creating a command object\nMarkProductAsSaleableCommand myCommand = new MarkProductAsSaleableCommand(\"12345\");\n\n// Accessing the ID of the product to be marked as saleable\nString id = myCommand.getId(); // returns \"12345\"\n",
              "description": ""
            },
            "name": "getId",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "MarkProductAsUnsaleableCommand.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/commands/MarkProductAsUnsaleableCommand.java",
    "content": {
      "structured": {
        "description": "A `MarkProductAsUnsaleableCommand` class with a constructor and a getter method for an `id` field. The command sets the `id` field of an aggregate to indicate that the product is un saleable. The `TargetAggregateIdentifier` annotation specifies the aggregate identifier for which the command is intended.",
        "items": [
          {
            "id": "d11422f4-75d5-1288-4249-02629cbf18e1",
            "ancestors": [],
            "type": "function",
            "description": "is a Axon Framework command that sets an aggregate identifier, allowing it to target a specific aggregation root. The class has a constructor that takes an id parameter and a method to retrieve the id.",
            "name": "MarkProductAsUnsaleableCommand",
            "location": {
              "start": 10,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 9
              }
            },
            "item_type": "class",
            "length": 19,
            "docLength": 5
          },
          {
            "id": "fe0c55d6-f5a9-439c-7c4b-5b84d51f2c7a",
            "ancestors": [
              "d11422f4-75d5-1288-4249-02629cbf18e1"
            ],
            "type": "function",
            "description": "retrieves the value of a variable `id`.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `id` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "String productId = \"12345\";\nMarkProductAsUnsaleableCommand markProductAsUnsaleableCommand = new MarkProductAsUnsaleableCommand(productId);\n// get id from command \nString productIdFromCommand = markProductAsUnsaleableCommand.getId();\n",
              "description": "\nThe code above creates a new instance of the `MarkProductAsUnsaleableCommand` class and sets its Id field to a string with the value \"12345\". It then retrieves the value of the id field from the command using the `getId()` method."
            },
            "name": "getId",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "WebCreateTodoCommand.java",
    "path": "command-side/src/main/java/com/soagrowers/productcommand/commands/WebCreateTodoCommand.java",
    "content": {
      "structured": {
        "description": "A class `WebCreateTodoCommand` that represents a command for creating a new todo item on a web application. The class has two instance fields: `id` and `description`, which hold the identifier and text of the todo item respectively. The class also provides getters for each field.",
        "items": [
          {
            "id": "cb763ce4-da28-39a5-f043-c4bd348fd895",
            "ancestors": [],
            "type": "function",
            "description": "is a Java object that represents a command for creating a new todo item. It has two instance variables: id and description, which are used to store the unique identifier and textual description of the item, respectively. The class also includes a constructor and two method implementations for retrieving the id and description of the todo item.",
            "name": "WebCreateTodoCommand",
            "location": {
              "start": 6,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 2,
                "end": 5
              }
            },
            "item_type": "class",
            "length": 18,
            "docLength": 3
          },
          {
            "id": "020bc81a-09b8-3faa-1f42-4f20e9889a81",
            "ancestors": [
              "cb763ce4-da28-39a5-f043-c4bd348fd895"
            ],
            "type": "function",
            "description": "retrieves the value of a field named 'id'.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    WebCreateTodoCommand command = new WebCreateTodoCommand(\"id\", \"description\");\n    String id = command.getId();\n    System.out.println(id);\n}\n",
              "description": ""
            },
            "name": "getId",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7837186c-15e9-d2bf-5740-77a2790a86c7",
            "ancestors": [
              "cb763ce4-da28-39a5-f043-c4bd348fd895"
            ],
            "type": "function",
            "description": "retrieves a string representing a description associated with an object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string containing the value of the `description` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "WebCreateTodoCommand command = new WebCreateTodoCommand(\"id\", \"description\");\nString description = command.getDescription(); \n",
              "description": ""
            },
            "name": "getDescription",
            "location": {
              "start": 20,
              "insert": 20,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AbstractEvent.java",
    "path": "common-things/src/main/java/com/soagrowers/productevents/events/AbstractEvent.java",
    "content": {
      "structured": {
        "description": "An abstract class named AbstractEvent that serves as a base class for events. The class has a constructor and a getter method for accessing the event ID, which is stored in a private field called id.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productevents.events.AbstractEvent Pages: 1 -->\n<svg width=\"572pt\" height=\"134pt\"\n viewBox=\"0.00 0.00 572.00 134.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 130)\">\n<title>com.soagrowers.productevents.events.AbstractEvent</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"319,-78 110,-78 110,-48 319,-48 319,-78\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"214.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractEvent</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductAddedEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-126 355,-126 355,-96 564,-96 564,-126\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-114\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-103\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAddedEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-80.03C328.09,-85.24 356.9,-90.93 382.55,-96\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"302.21,-76.56 291.72,-78.06 300.85,-83.43 302.21,-76.56\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductSaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-78 355,-78 355,-48 564,-48 564,-78\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductSaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M329.48,-63C337.9,-63 346.36,-63 354.7,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"329.26,-59.5 319.26,-63 329.26,-66.5 329.26,-59.5\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductUnsaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-30 355,-30 355,0 564,0 564,-30\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductUnsaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-45.97C328.09,-40.76 356.9,-35.07 382.55,-30\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"300.85,-42.57 291.72,-47.94 302.21,-49.44 300.85,-42.57\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-72.5 0,-72.5 0,-53.5 74,-53.5 74,-72.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-60.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.49,-63C92.48,-63 101.06,-63 109.86,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.36,-59.5 74.36,-63 84.36,-66.5 84.36,-59.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6b5d07bf-15f6-85a9-a44b-e3d7bc44c9cb",
            "ancestors": [],
            "type": "function",
            "description": "is an abstract class that serves as a base for other events in the product events package. It provides an identifier (id) field and a getId() method for retrieving the identifier. The class also has a constructor that takes an id parameter for customizing the event instance.",
            "name": "AbstractEvent",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 14,
            "docLength": null
          },
          {
            "id": "599566c4-69d0-209d-1a49-662339c83c68",
            "ancestors": [
              "6b5d07bf-15f6-85a9-a44b-e3d7bc44c9cb"
            ],
            "type": "function",
            "description": "returns the `id` field value associated with a given object instance.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `id` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "AbstractEvent event = new AbstractEvent(\"ID\");\nString eventId = event.getId();\nSystem.out.println(eventId);\n",
              "description": "\nThis code creates a new instance of the abstract class and assigns it to the variable \"event\". It then uses the getId() method to retrieve the id of the event and stores it in the string \"eventId\". Finally, it prints the value of \"eventId\" to the console."
            },
            "name": "getId",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductAddedEvent.java",
    "path": "common-things/src/main/java/com/soagrowers/productevents/events/ProductAddedEvent.java",
    "content": {
      "structured": {
        "description": "A `ProductAddedEvent` class that extends an abstract event class. The `ProductAddedEvent` class has a constructor that takes a unique identifier and the name of the product as parameters. It also provides a getter method for the name of the product.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productevents.events.AbstractEvent Pages: 1 -->\n<svg width=\"572pt\" height=\"134pt\"\n viewBox=\"0.00 0.00 572.00 134.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 130)\">\n<title>com.soagrowers.productevents.events.AbstractEvent</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"319,-78 110,-78 110,-48 319,-48 319,-78\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"214.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractEvent</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductAddedEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-126 355,-126 355,-96 564,-96 564,-126\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-114\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-103\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAddedEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-80.03C328.09,-85.24 356.9,-90.93 382.55,-96\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"302.21,-76.56 291.72,-78.06 300.85,-83.43 302.21,-76.56\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductSaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-78 355,-78 355,-48 564,-48 564,-78\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductSaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M329.48,-63C337.9,-63 346.36,-63 354.7,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"329.26,-59.5 319.26,-63 329.26,-66.5 329.26,-59.5\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductUnsaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-30 355,-30 355,0 564,0 564,-30\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductUnsaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-45.97C328.09,-40.76 356.9,-35.07 382.55,-30\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"300.85,-42.57 291.72,-47.94 302.21,-49.44 300.85,-42.57\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-72.5 0,-72.5 0,-53.5 74,-53.5 74,-72.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-60.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.49,-63C92.48,-63 101.06,-63 109.86,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.36,-59.5 74.36,-63 84.36,-66.5 84.36,-59.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "d16be346-60df-57b3-7346-3cb46071778d",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of the AbstractEvent class and represents an event related to the addition of a product. The class has a name field that stores the product's name.",
            "name": "ProductAddedEvent",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 17,
            "docLength": null
          },
          {
            "id": "23005ab9-81ae-268c-7845-e0a48bc4f38d",
            "ancestors": [
              "d16be346-60df-57b3-7346-3cb46071778d"
            ],
            "type": "function",
            "description": "retrieves the value of the `name` field of a class instance and returns it as a string.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `name` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "ProductAddedEvent product = new ProductAddedEvent(\"1234\", \"name\");\nString name = product.getName();\nSystem.out.println(name);\n",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductSaleableEvent.java",
    "path": "common-things/src/main/java/com/soagrowers/productevents/events/ProductSaleableEvent.java",
    "content": {
      "structured": {
        "description": "An abstract class named ProductSaleableEvent that extends AbstractEvent. The class has a constructor that takes a string parameter and initializes a super() call for setting the event ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productevents.events.AbstractEvent Pages: 1 -->\n<svg width=\"572pt\" height=\"134pt\"\n viewBox=\"0.00 0.00 572.00 134.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 130)\">\n<title>com.soagrowers.productevents.events.AbstractEvent</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"319,-78 110,-78 110,-48 319,-48 319,-78\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"214.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractEvent</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductAddedEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-126 355,-126 355,-96 564,-96 564,-126\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-114\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-103\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAddedEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-80.03C328.09,-85.24 356.9,-90.93 382.55,-96\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"302.21,-76.56 291.72,-78.06 300.85,-83.43 302.21,-76.56\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductSaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-78 355,-78 355,-48 564,-48 564,-78\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductSaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M329.48,-63C337.9,-63 346.36,-63 354.7,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"329.26,-59.5 319.26,-63 329.26,-66.5 329.26,-59.5\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductUnsaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-30 355,-30 355,0 564,0 564,-30\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductUnsaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-45.97C328.09,-40.76 356.9,-35.07 382.55,-30\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"300.85,-42.57 291.72,-47.94 302.21,-49.44 300.85,-42.57\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-72.5 0,-72.5 0,-53.5 74,-53.5 74,-72.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-60.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.49,-63C92.48,-63 101.06,-63 109.86,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.36,-59.5 74.36,-63 84.36,-66.5 84.36,-59.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4afad042-cfc6-fc95-c24b-d6487fa7027f",
            "ancestors": [],
            "type": "function",
            "description": "extends AbstractEvent and provides a way to create an event object with either no ID or a specific ID during its constructor, following the same pattern as the superclass AbstractEvent.\n",
            "fields": [],
            "name": "ProductSaleableEvent",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductUnsaleableEvent.java",
    "path": "common-things/src/main/java/com/soagrowers/productevents/events/ProductUnsaleableEvent.java",
    "content": {
      "structured": {
        "description": "A class named ProductUnsaleableEvent that extends AbstractEvent. The class has a constructor that takes an ID string as input and another constructor that inherits the ID from the superclass.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productevents.events.AbstractEvent Pages: 1 -->\n<svg width=\"572pt\" height=\"134pt\"\n viewBox=\"0.00 0.00 572.00 134.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 130)\">\n<title>com.soagrowers.productevents.events.AbstractEvent</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"319,-78 110,-78 110,-48 319,-48 319,-78\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"214.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractEvent</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductAddedEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-126 355,-126 355,-96 564,-96 564,-126\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-114\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-103\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAddedEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-80.03C328.09,-85.24 356.9,-90.93 382.55,-96\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"302.21,-76.56 291.72,-78.06 300.85,-83.43 302.21,-76.56\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductSaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-78 355,-78 355,-48 564,-48 564,-78\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductSaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M329.48,-63C337.9,-63 346.36,-63 354.7,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"329.26,-59.5 319.26,-63 329.26,-66.5 329.26,-59.5\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductUnsaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-30 355,-30 355,0 564,0 564,-30\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductUnsaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-45.97C328.09,-40.76 356.9,-35.07 382.55,-30\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"300.85,-42.57 291.72,-47.94 302.21,-49.44 300.85,-42.57\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-72.5 0,-72.5 0,-53.5 74,-53.5 74,-72.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-60.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.49,-63C92.48,-63 101.06,-63 109.86,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.36,-59.5 74.36,-63 84.36,-66.5 84.36,-59.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "7a65d51d-13bd-42a5-0e41-b5d875de1b87",
            "ancestors": [],
            "type": "function",
            "description": "is a subclass of AbstractEvent with no fields and two constructors: a default constructor and a constructor that takes a String ID as a parameter.\n",
            "fields": [],
            "name": "ProductUnsaleableEvent",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Asserts.java",
    "path": "common-things/src/main/java/com/soagrowers/utils/Asserts.java",
    "content": {
      "structured": {
        "description": "An enumeration class called `Asserts` that provides several methods for asserting conditions in a program. The class uses logging and error handling mechanisms to report violations of the assertions. The methods include `isTrue`, `isFalse`, `isNotEmpty`, and `areNotEmpty`, which are used to check the truth or falsehood of a statement, the emptiness of an object, and the non-emptiness of a list of objects, respectively. Additionally, there is a `setAssertsTo` method that enables or disables the asserts functionality, and an `isAssertsOn` method that returns the current state of the asserts functionality.",
        "items": [
          {
            "id": "207747b5-83b5-55b5-eb42-b9c91b21416e",
            "ancestors": [],
            "type": "function",
            "description": "checks if a given boolean value is true or false. If it's not true, an AssertionError is thrown with a message logged to the logger.",
            "params": [
              {
                "name": "trueism",
                "type_name": "boolean",
                "description": "boolean value that is compared to `active` and `false` in the if statement, triggering the warning and error message when it is false.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Asserts.active = true;\nAsserts.isTrue(false); // Throws AssertionError, NOT_TRUE\nAsserts.active = false;\nAsserts.isTrue(true); // Does nothing\n",
              "description": ""
            },
            "name": "isTrue",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "865dda59-d74c-1cb0-2b4d-812edf60cf53",
            "ancestors": [],
            "type": "function",
            "description": "checks whether a given boolean value is true or false. If the value is true, an error message is logged and an AssertionError is thrown.",
            "params": [
              {
                "name": "falsehood",
                "type_name": "boolean",
                "description": "boolean value that is being tested, with a specific focus on whether it is true or false.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Asserts.setAssertsTo(true);\nisFalse(false);\n",
              "description": ""
            },
            "name": "isFalse",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "e93e48a5-182e-fcaa-fc41-f54fa4ea4c59",
            "ancestors": [],
            "type": "function",
            "description": "checks if an object is not null and is not a list or a string that is empty. If it finds any issues, it logs an error message and throws an exception.",
            "params": [
              {
                "name": "object",
                "type_name": "Object",
                "description": "object that is being checked for certain properties, such as being non-null and having a class that is assignable to List or String.\n\n* If `active` is true, then `object` represents an object that may be assigned to a List or String type.\n* The `Class` of `object` can be any subclass of Object, indicating its potential assignment to various types.\n* If `null != object`, then the input is not null and has a non-null value.\n* If `List.class.isAssignableFrom(object.getClass())`, then `object` is a List that may be assigned to the method.\n* If `String.class.isAssignableFrom(object.getClass())`, then `object` is a String that may be assigned to the method.\n* If `(String) object == EMPTY_STRING`, then `object` is a String with value equal to the `EMPTY_STRING` constant.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Asserts.isNotEmpty(object)\n",
              "description": "\nThis method will check if the object passed in as a parameter is not null and is not an empty string, it will throw a new instance of AssertionError if either of those conditions are met. This method can also be used to check if an array or list is not empty by passing in the array or list as a parameter."
            },
            "name": "isNotEmpty",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "e8f02fe5-40c0-7289-0e43-600c4fbdcab0",
            "ancestors": [],
            "type": "function",
            "description": "checks whether a list of objects is not empty by iterating over its elements and calling a nested function `isNotEmpty` on each object.",
            "params": [
              {
                "name": "objects",
                "type_name": "List<Object>",
                "description": "list of objects that are being checked for emptiness by the `areNotEmpty()` method.\n\nThe function takes a list of objects as an input, which can have any combination of attributes and methods. The list may contain duplicate elements or have other structural properties that can be important for the function's operation.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example {\n    public static void main(String[] args) {\n        List<Object> objects = new ArrayList<>();\n        objects.add(\"hello\");\n        objects.add(1);\n        objects.add(new Date());\n\n        Asserts.instance.areNotEmpty(objects); // This method will check if the list contains any null or empty elements and throw an AssertionError if it finds one.\n    }\n}\n",
              "description": "\nIn this example, the areNotEmpty method is called with a list containing three elements: \"hello\", 1, and a new Date object. The method checks each element in the list for null or empty values using the isNotEmpty method and throws an AssertionError if it finds any."
            },
            "name": "areNotEmpty",
            "location": {
              "start": 69,
              "insert": 69,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "650664b9-f679-63a9-554f-125b0a9ff0ca",
            "ancestors": [],
            "type": "function",
            "description": "checks whether the `active` flag is set to `true`. If it is, the function returns `true`, otherwise it returns `false`.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the `active` property is true.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public boolean isAssertsOn() {\n        return active;\n    }\n",
              "description": "\nThis method returns a boolean indicating whether the Asserts are turned on or not. It can be used to check if the asserts are enabled, for example, during development or testing, and then turn them off when deploying the code in production."
            },
            "name": "isAssertsOn",
            "location": {
              "start": 77,
              "insert": 77,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9e7b0da3-eba9-b283-7346-75028b373443",
            "ancestors": [],
            "type": "function",
            "description": "sets the active status of the `Asserts` to the provided `boolean` value, affecting the output of any subsequent `assert` statements.",
            "params": [
              {
                "name": "asserts",
                "type_name": "boolean",
                "description": "state of the active assertions in the code.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Asserts.setAssertsTo(true);\n    }\n}\n",
              "description": ""
            },
            "name": "setAssertsTo",
            "location": {
              "start": 81,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AssertsTest.java",
    "path": "common-things/src/test/java/com/soagrowers/utils/AssertsTest.java",
    "content": {
      "structured": {
        "description": "A test class called AssertsTest with several test methods that test various aspects of the Asserts class, including setting and checking the value of the `isAssertsOn` field, testing whether a list is not empty, and verifying that a method throws an expected exception. The code uses Java's assertions framework and packages such as org.junit and java.util.",
        "items": [
          {
            "id": "a0c1928d-4982-0baa-0848-00cb1b16d886",
            "ancestors": [],
            "type": "function",
            "description": "in the provided Java file contains several tests for the `Asserts` class, including testing the `setAssertsTo()` method, `isNotEmpty()`, and `areNotEmpty()` methods. These tests verify that the `Asserts` instance is properly configured and that its methods behave as expected when given different inputs.",
            "name": "AssertsTest",
            "location": {
              "start": 14,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 10,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 74,
            "docLength": 3
          },
          {
            "id": "6058ebdf-14f0-8baf-ed49-3fa549fc3c14",
            "ancestors": [
              "a0c1928d-4982-0baa-0848-00cb1b16d886"
            ],
            "type": "function",
            "description": "sets the Asserts instance to true, enabling assertion checks throughout the code.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.UUID;\n\npublic class AssertsTest {\n\n    @Before\n    public void setup(){\n        Asserts.INSTANCE.setAssertsTo(true);\n    }\n\n    @Test\n    public void testSetAsserts(){\n\n        Asserts.INSTANCE.setAssertsTo(true);\n        assertTrue(Asserts.INSTANCE.isAssertsOn());\n\n        Asserts.INSTANCE.setAssertsTo(false);\n        assertFalse(Asserts.INSTANCE.isAssertsOn());\n    }\n}\n",
              "description": ""
            },
            "name": "setup",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "1503c8ba-e9d0-ad80-8c4e-d1fcbdfa5cab",
            "ancestors": [
              "a0c1928d-4982-0baa-0848-00cb1b16d886"
            ],
            "type": "function",
            "description": "sets and verifies the state of the `Asserts.INSTANCE.setAssertsTo()` method, which enables or disables asserts on a Java application.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testSetAsserts(){\n\n        Asserts.INSTANCE.setAssertsTo(true);\n        assertTrue(Asserts.INSTANCE.isAssertsOn());\n\n        Asserts.INSTANCE.setAssertsTo(false);\n        assertFalse(Asserts.INSTANCE.isAssertsOn());\n    }\n",
              "description": "\nThis method is testing the setAsserts() method by first setting it to true and then false. It uses the assertTrue() and assertFalse() methods provided by JUnit to test if the setAsserts() method successfully sets the value of the assertsTo variable to true or false. The method is used to ensure that the setAsserts() method works correctly when it is given a boolean argument."
            },
            "name": "testSetAsserts",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "c186988f-4784-7ca3-1a4b-2d5d3fed6069",
            "ancestors": [
              "a0c1928d-4982-0baa-0848-00cb1b16d886"
            ],
            "type": "function",
            "description": "tests whether a given string is not empty using the `Asserts.INSTANCE.isNotEmpty()` method. It throws an `AssertionError` if the argument is null or empty.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testIsNotEmpty(){\n\n        Asserts.INSTANCE.isNotEmpty(new String(\"test\"));\n\n        try {\n            Asserts.INSTANCE.isNotEmpty(null);\n            assertTrue(false);\n        } catch (AssertionError ae){\n            assertEquals(Asserts.INSTANCE.UNEXPECTED_NULL, ae.getMessage());\n        }\n\n        try {\n            Asserts.INSTANCE.isNotEmpty(Asserts.EMPTY_STRING);\n            assertTrue(false);\n        } catch (AssertionError ae){\n            assertEquals(Asserts.INSTANCE.UNEXPECTED_EMPTY_STRING, ae.getMessage());\n        }\n    }\n",
              "description": ""
            },
            "name": "testIsNotEmpty",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "540cdfac-7cd1-09ae-f947-a6d368f65e74",
            "ancestors": [
              "a0c1928d-4982-0baa-0848-00cb1b16d886"
            ],
            "type": "function",
            "description": "tests if an array list is not empty by verifying that it contains at least one non-empty element. If the list is empty, it throws an `AssertionError`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void test(){\n        String id = UUID.randomUUID().toString();\n        String name = \"test\";\n\n        Asserts.INSTANCE.areNotEmpty(Arrays.asList(id, name));\n\n        try {\n            String id = null;\n            String name = Asserts.EMPTY_STRING;\n            Asserts.INSTANCE.areNotEmpty(Arrays.asList(id, name));\n            assertTrue(false);\n        } catch (AssertionError ae){\n            assertEquals(ae.getMessage(), Asserts.UNEXPECTED_NULL);\n        }\n    }\n",
              "description": "\nThe method testAreNotEmpty is used by calling the areNotEmpty method on the instance of the class, passing in an array list as an argument. If any element in the array list is null or empty, the method will throw an AssertionError with a message indicating that the element is unexpectedly empty or null."
            },
            "name": "testAreNotEmpty",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "eac02ee1-0e70-1fa5-524e-58607dad3f6f",
            "ancestors": [
              "a0c1928d-4982-0baa-0848-00cb1b16d886"
            ],
            "type": "function",
            "description": "tests whether a list is empty using the `Asserts.isNotEmpty()` method. It throws an `IllegalArgumentException` if the list is empty and passes otherwise.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testIsNotEmptyWithAList(){\n    String id = UUID.randomUUID().toString();\n    String name = Asserts.EMPTY_STRING;\n    \n    try {\n        Asserts.INSTANCE.isNotEmpty(Arrays.asList(id, name));\n        assertTrue(false);\n    } catch (IllegalArgumentException ia){\n        assertTrue(true);\n    }\n}\n",
              "description": ""
            },
            "name": "testIsNotEmptyWithAList",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ConfigServiceApplication.java",
    "path": "config-service/src/main/java/com/soagrowers/ConfigServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables config server functionality through the `EnableConfigServer` annotation. The application class extends `SpringBootApplication`, and the `main` method starts the application by running it with the given command-line arguments.",
        "items": [
          {
            "id": "353fb69f-edeb-57ab-9d45-e21838efeb86",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables config server functionality and provides a main method for launching the application.",
            "name": "ConfigServiceApplication",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "8f0561f4-e3eb-f39a-ce4c-f3743b2cc5ff",
            "ancestors": [
              "353fb69f-edeb-57ab-9d45-e21838efeb86"
            ],
            "type": "function",
            "description": "runs a Spring Application, passing the `ConfigServiceApplication` class as an argument to the `SpringApplication.run()` method, which configures and starts the application.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "1 or more command-line arguments passed to the `SpringApplication.run()` method when invoking the application.\n\n* The function takes an array of strings called `args` as input.\n* Depending on the context, this array may contain any combination of command-line arguments passed to the program when it was run.\n* Each string in the `args` array represents a separate argument provided by the user at runtime.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "GatewayServiceApplication.java",
    "path": "gateway-service/src/main/java/com/soagrowers/GatewayServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that enables the Zuul reverse proxy feature and sets up a simple logging pre-filter. The `SimpleLoggingPreFilter` class is created and injected as a bean, allowing it to log incoming requests. The `main` method starts the application using the `SpringApplication` class.",
        "items": [
          {
            "id": "be79cc34-087e-07af-5948-7a7b2689f59c",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Zuul proxy functionality and defines a simple logging pre-filter. The application acts as a reverse proxy, forwarding requests to other services based on routes.",
            "name": "GatewayServiceApplication",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 13,
            "docLength": null
          },
          {
            "id": "357b0368-dd84-c1a7-7040-87d4ca910cb0",
            "ancestors": [
              "be79cc34-087e-07af-5948-7a7b2689f59c"
            ],
            "type": "function",
            "description": "creates a `SimpleLoggingPreFilter` instance, which logs incoming requests and responses for debugging purposes.",
            "params": [],
            "returns": {
              "type_name": "SimpleLoggingPreFilter",
              "description": "a `SimpleLoggingPreFilter` instance.\n\nThe `SimpleLoggingPreFilter` class is a pre-filter that logs incoming requests and responses to the application's log. The filter is created using the `@Bean` annotation. It does not have any attributes or properties explicitly defined.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    public SimpleLoggingPreFilter simplePreFilter() {\n        return new SimpleLoggingPreFilter();\n    }\n",
              "description": ""
            },
            "name": "simplePreFilter",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "6b569ed7-d139-f892-cb48-b87bfca2c11b",
            "ancestors": [
              "be79cc34-087e-07af-5948-7a7b2689f59c"
            ],
            "type": "function",
            "description": "runs a Spring application, specifically the `GatewayServiceApplication`, by calling the `SpringApplication.run()` method and passing it the class and argument array.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the application when it is launched.\n\n* `args`: an array of String objects representing command-line arguments passed to the application.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "SimpleLoggingPreFilter.java",
    "path": "gateway-service/src/main/java/com/soagrowers/prefilters/SimpleLoggingPreFilter.java",
    "content": {
      "structured": {
        "description": "A pre-filter in Zuul called \"SimpleLoggingPreFilter\". It logs the request method and URL using the slf4j logger. The filter type is set to \"pre\", the filter order is 1, and the should filter method is set to true. The run method logs the request and returns null.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.prefilters.SimpleLoggingPreFilter Pages: 1 -->\n<svg width=\"154pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 154.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.soagrowers.prefilters.SimpleLoggingPreFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"146,-30 0,-30 0,0 146,0 146,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.prefilters.</text>\n<text text-anchor=\"middle\" x=\"73\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SimpleLoggingPreFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"104.5,-85 41.5,-85 41.5,-66 104.5,-66 104.5,-85\"/>\n<text text-anchor=\"middle\" x=\"73\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ZuulFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M73,-55.65C73,-47.36 73,-37.78 73,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"69.5,-55.87 73,-65.87 76.5,-55.87 69.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "c4ba3b39-7fb1-4f9e-7045-bf87949b2d22",
            "ancestors": [],
            "type": "function",
            "description": "is a custom Zuul filter that logs incoming HTTP requests with a debug level message. The filter has a single method, `run()`, which retrieves the current request context and logs the request details using the `log.debug()` method from the SLF4J logging framework.",
            "name": "SimpleLoggingPreFilter",
            "location": {
              "start": 13,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 9,
                "end": 12
              }
            },
            "item_type": "class",
            "length": 27,
            "docLength": 3
          },
          {
            "id": "6832db79-220a-4985-1946-55bed007fef8",
            "ancestors": [
              "c4ba3b39-7fb1-4f9e-7045-bf87949b2d22"
            ],
            "type": "function",
            "description": "returns the string `\"pre\"`.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "the string \"pre\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Override\n    public String filterType() {\n        return \"pre\";\n    }\n}\n",
              "description": ""
            },
            "name": "filterType",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "9004d2bd-7213-84a1-fc47-a22c489e4b59",
            "ancestors": [
              "c4ba3b39-7fb1-4f9e-7045-bf87949b2d22"
            ],
            "type": "function",
            "description": "returns an integer value of 1, indicating that it filters the input data based on a specific order.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value of 1.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic int filterOrder() {\n    return 1;\n}\n",
              "description": "\nThis method defines the order in which filters are executed within a ZuulFilter class. In this case, the order returned is \"1\"."
            },
            "name": "filterOrder",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f5663d81-114a-a8bb-e04f-172060a5294a",
            "ancestors": [
              "c4ba3b39-7fb1-4f9e-7045-bf87949b2d22"
            ],
            "type": "function",
            "description": "determines whether filtering is necessary based on a predefined condition and returns `true` if filtering is required.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating that filtering is required.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic boolean shouldFilter() {\n    return true; // True, the filter will be executed\n}\n",
              "description": ""
            },
            "name": "shouldFilter",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "eebeaf35-85f8-f2a0-984c-27f41b02feda",
            "ancestors": [
              "c4ba3b39-7fb1-4f9e-7045-bf87949b2d22"
            ],
            "type": "function",
            "description": "logs a message to the debug log of the current context, indicating the HTTP method and URL of the incoming request.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "a debug message regarding the HTTP request method and URL.\n\n* The output is an Object of type null.\n* The `RequestContext` object `ctx` contains information about the current request context, including the request itself and various other attributes.\n* The `HttpServletRequest` object `request` is a subclass of `ServletRequest` that provides access to information about the HTTP request, such as the method, URL, and headers.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "RequestContext ctx = RequestContext.getCurrentContext();\nHttpServletRequest request = ctx.getRequest();\nlog.debug(\"{} request to {}\", request.getMethod(), request.getRequestURL().toString());\n",
              "description": ""
            },
            "name": "run",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AddDuplicateProductTest.java",
    "path": "integration-test/src/integration-test/java/com/soagrowers/productintegrationtests/AddDuplicateProductTest.java",
    "content": {
      "structured": {
        "description": "A class `AddDuplicateProductTest` that tests the addition of duplicate products through different scenarios using RestAssured library. The class uses the `@FixMethodOrder` annotation to specify the method order, and the `@BeforeClass` and `@After` annotations to perform setup and teardown actions respectively. The `testAddOfDuplicatesFailsPartA` and `testAddOfDuplicatesFailsPartB` methods are the main tests, where the former succeeds with a created response status code of 201, while the latter fails with a conflict status code of 409.",
        "items": [
          {
            "id": "c205e105-ee9c-b9a2-3242-b6f8a47933f1",
            "ancestors": [],
            "type": "function",
            "description": "is a JUnit test class that tests the addition of duplicate products through the API. The class has two tests, one that successfully adds a product with a unique ID and name, and another that attempts to add a duplicate product and receives a conflict status code.",
            "name": "AddDuplicateProductTest",
            "location": {
              "start": 21,
              "insert": 18,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 17,
                "end": 20
              }
            },
            "item_type": "class",
            "length": 38,
            "docLength": 3
          },
          {
            "id": "07947ced-55ed-388e-7548-67b356a75b61",
            "ancestors": [
              "c205e105-ee9c-b9a2-3242-b6f8a47933f1"
            ],
            "type": "function",
            "description": "generates a unique identifier and sets a product name based on the identifier, both initialized as strings.",
            "params": [],
            "name": "setupClass",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "f826a4e3-e5b4-e898-ee41-816affe7342b",
            "ancestors": [
              "c205e105-ee9c-b9a2-3242-b6f8a47933f1"
            ],
            "type": "function",
            "description": "delays the execution of the subsequent test by 2 seconds using `TimeUnit.SECONDS.sleep()` method.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@After\n    public void afterEach() throws InterruptedException {\n        TimeUnit.SECONDS.sleep(2l);\n    }\n",
              "description": "\nThis example will cause a delay of 2 seconds between each test case in the class. The delay is necessary to ensure that the system has time to process the previous request before executing the next one."
            },
            "name": "afterEach",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "bceab328-f780-519e-c548-4a3128c04b0e",
            "ancestors": [
              "c205e105-ee9c-b9a2-3242-b6f8a47933f1"
            ],
            "type": "function",
            "description": "tests whether adding a product with an existing ID fails with a `HttpStatus.SC_CONFLICT` status code.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testAddOfDuplicatesFailsPartA() {\n        given().\n                port(PORT_FOR_GATEWAY).\n                when().\n                post(PRODUCTS_CMD_BASE_PATH + CMD_PRODUCT_ADD + \"/{id}?name={name}\", id, name).\n                then().\n                statusCode(HttpStatus.SC_CREATED);\n    }\n",
              "description": ""
            },
            "name": "testAddOfDuplicatesFailsPartA",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "68f6f16b-9376-8daf-7444-a51d8a857035",
            "ancestors": [
              "c205e105-ee9c-b9a2-3242-b6f8a47933f1"
            ],
            "type": "function",
            "description": "tests whether adding a product with an already existing ID fails and returns a conflict status code (409).",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testAddOfDuplicatesFailsPartB() {\n        given()\n                .port(PORT_FOR_GATEWAY)\n                .when()\n                .post(PRODUCTS_CMD_BASE_PATH + CMD_PRODUCT_ADD + \"/{id}?name={name}\", id, name)\n                .then()\n                .statusCode(HttpStatus.SC_CONFLICT);\n    }\n",
              "description": ""
            },
            "name": "testAddOfDuplicatesFailsPartB",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AssertSystemHealthTest.java",
    "path": "integration-test/src/integration-test/java/com/soagrowers/productintegrationtests/AssertSystemHealthTest.java",
    "content": {
      "structured": {
        "description": "Several unit tests for a system that integrates various services and systems. The tests include checking the health of different components such as the gateway, discovery, configuration, command side, and query side. Each test method uses the `RestAssured` library to make HTTP requests to the appropriate endpoints and verify the response status code and body content.",
        "items": [
          {
            "id": "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4",
            "ancestors": [],
            "type": "function",
            "description": "is a test class for verifying the health of various systems in a microservices architecture. It contains several tests that verify the status of different components such as the gateway, discovery, configuration, commands, and queries. These tests use Selenium WebDriver to make HTTP requests to the appropriate endpoints and check the response status code and body content to ensure that the system is healthy.",
            "name": "AssertSystemHealthTest",
            "location": {
              "start": 19,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 15,
                "end": 18
              }
            },
            "item_type": "class",
            "length": 143,
            "docLength": 3
          },
          {
            "id": "6ec3f2b3-3fa6-3887-ff40-63a7feda3c31",
            "ancestors": [
              "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4"
            ],
            "type": "function",
            "description": "prints a message to the console indicating whether the system is in production mode based on the value of `Statics.PRODUCTION`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import com.soagrowers.utils.Statics;\nimport org.junit.Before;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class AssertSystemHealthTest {\n    private static final Logger LOG = LoggerFactory.getLogger(AssertSystemHealthTest.class);\n\n    @Before\n    public void setup(){\n        System.out.println(\"PRODUCTION MODE: \" + Statics.PRODUCTION);\n    }\n}\n",
              "description": ""
            },
            "name": "setup",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "6a3ee82a-f459-939d-9245-7e302941a4cd",
            "ancestors": [
              "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4"
            ],
            "type": "function",
            "description": "verifies that the gateway is healthy by checking the response status code and body content of two endpoints: `/health/` and `/routes/`.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void assertGatewayHealth() {\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/health/\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"status\", Matchers.is(\"UP\")).\n                body(\"hystrix.status\", Matchers.is(\"UP\"));\n\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/routes/\").\n                then().\n                statusCode(HttpStatus.SC_OK);\n    }\n",
              "description": "\nThe above code is an example of how the assertGatewayHealth method would be used to test the health of the gateway service, by making two separate API calls to /health/ and /routes/. The first call retrieves the status of the Hystrix circuit breaker, while the second call retrieves a list of all routes that are currently defined in the system. Both API calls are expected to return an HTTP status code of 200 (OK) and a JSON payload with specific values, which are then verified using Hamcrest matchers."
            },
            "name": "assertGatewayHealth",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 18,
            "docLength": null
          },
          {
            "id": "f87c600f-ae6f-7f90-8f4a-c228e46088c5",
            "ancestors": [
              "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4"
            ],
            "type": "function",
            "description": "verifies that a discovery endpoint returns a status code of 200 OK, with specific body fields matching expected values related to the Hystrix and Discovery composites.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void assertDiscoveryHealth() {\n        given().\n                port(Statics.PORT_FOR_DISCOVERY).\n                when().\n                get(\"/health/\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"status\", Matchers.is(\"UP\")).\n                body(\"discoveryComposite.status\", Matchers.is(\"UP\")).\n                body(\"hystrix.status\", Matchers.is(\"UP\"));\n    }\n",
              "description": ""
            },
            "name": "assertDiscoveryHealth",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "07563284-105a-0d94-f348-e6916164afc4",
            "ancestors": [
              "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4"
            ],
            "type": "function",
            "description": "verifies that the configuration server responds with an HTTP 200 status code and a body containing \"UP\" for both the configuration server and the integration test resource.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void assertConfigHealth() {\n        given().\n                port(Statics.PORT_FOR_CONFIG).\n                when().\n                get(\"/health/\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"status\", Matchers.is(\"UP\")).\n                body(\"configServer.status\", Matchers.is(\"UP\"));\n\n        given().\n                port(Statics.PORT_FOR_CONFIG).\n                when().\n                get(\"/integration-test/default/master\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"name\", Matchers.is(\"integration-test\"));\n    }\n",
              "description": ""
            },
            "name": "assertConfigHealth",
            "location": {
              "start": 63,
              "insert": 63,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "349074f4-6eda-7585-7446-160aaea0205c",
            "ancestors": [
              "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4"
            ],
            "type": "function",
            "description": "verifies that the gateway's health check response is UP, and the message returned by the command configuration endpoint matches the expected value. It also checks that the instances of the command service are running and have the expected action type.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void assertCommandSideHealth() {\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/commands/health/\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"status\", Matchers.is(\"UP\")).\n                body(\"rabbit.status\", Matchers.is(\"UP\")).\n                body(\"mongo.status\", Matchers.is(\"UP\"));\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/commands/message\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(Matchers.is(cmdConfigMessage));\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/commands/instances\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"serviceId\", Matchers.hasItems(Statics.CMD_SERVICE_ID)).\n                body(\"instanceInfo.actionType\", Matchers.hasItems(\"ADDED\"));\n    }\n",
              "description": ""
            },
            "name": "assertCommandSideHealth",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 38,
            "docLength": null
          },
          {
            "id": "b963afb3-4ff7-e2a2-a749-f10d6667abb5",
            "ancestors": [
              "9b8b8ceb-b978-8d89-e64e-7851c26ee6f4"
            ],
            "type": "function",
            "description": "verifies that the query service is up and running, checks the message config, and retrieves instance information to ensure that the query service is properly initialized.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void assertQuerySideHealth() {\n        String qryConfigMessage;\n        if(!Statics.PRODUCTION){\n            qryConfigMessage = Statics.LOCAL_QRY_MESSAGE;\n        } else {\n            qryConfigMessage = Statics.PROD_QRY_MESSAGE;\n        }\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/queries/health/\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"status\", Matchers.is(\"UP\")).\n                body(\"db.status\", Matchers.is(\"UP\")).\n                body(\"rabbit.status\", Matchers.is(\"UP\")).\n                body(\"db.database\", Matchers.is(\"H2\"));\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/queries/message\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(Matchers.is(qryConfigMessage));\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n                when().\n                get(\"/queries/instances\").\n                then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"serviceId\", Matchers.hasItems(Statics.QRY_SERVICE_ID)).\n                body(\"instanceInfo.actionType\", Matchers.hasItems(\"ADDED\"));\n    }\n",
              "description": ""
            },
            "name": "assertQuerySideHealth",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "EndToEndProductTest.java",
    "path": "integration-test/src/integration-test/java/com/soagrowers/productintegrationtests/EndToEndProductTest.java",
    "content": {
      "structured": {
        "description": "An EndToEndProductTest class that sets up a test suite for product integration testing. The class uses the RestAssured framework to send HTTP requests to the command-side and query-side gateways. The tests include one command test to create a new product and another test to check that the new product created event has arrived on the query-side and been made available for clients to view.",
        "items": [
          {
            "id": "c5eda495-8a67-d287-ea48-2286d3b7aca1",
            "ancestors": [],
            "type": "function",
            "description": "is a JUnit test class that tests the end-to-end integration of a product creation and retrieval functionality through REST API calls. The class sets up a mock command-side environment, creates a new product, and then checks that the new product has arrived on the query-side and been made available for clients to view.",
            "name": "EndToEndProductTest",
            "location": {
              "start": 25,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 24
              }
            },
            "item_type": "class",
            "length": 49,
            "docLength": 3
          },
          {
            "id": "0ff8184e-7849-219d-4742-f7fff039ff5c",
            "ancestors": [
              "c5eda495-8a67-d287-ea48-2286d3b7aca1"
            ],
            "type": "function",
            "description": "generates a unique identifier and assigns it to a variable named `id`. It also creates a string variable named `name` that combines the identifier with additional text.",
            "params": [],
            "name": "setupClass",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "b6c2b2d6-ed24-5ca2-0540-4c49671781b4",
            "ancestors": [
              "c5eda495-8a67-d287-ea48-2286d3b7aca1"
            ],
            "type": "function",
            "description": "pauses for 2 seconds before executing the next test in a test suite.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@After\npublic void afterEach() throws InterruptedException {\n    TimeUnit.SECONDS.sleep(2l);\n}\n",
              "description": "\nThis method is a Junit annotation that creates a hook to be called after each test method has finished executing. It takes an exception as input and is used to pause the execution of the method for a certain amount of time, which can help to reduce the number of requests made to the system during testing."
            },
            "name": "afterEach",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "e2b3d3ae-a242-1793-124c-800d96e97291",
            "ancestors": [
              "c5eda495-8a67-d287-ea48-2286d3b7aca1"
            ],
            "type": "function",
            "description": "posts a product to the gateway with an ID and name, returning a HTTP Status Code 201 Created if successful.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testA_PostAProduct() {\n\n    given().\n            port(PORT_FOR_GATEWAY).\n    when().\n            post(PRODUCTS_CMD_BASE_PATH + CMD_PRODUCT_ADD + \"/{id}?name={name}\", id, name).\n    then().\n            statusCode(HttpStatus.SC_CREATED);\n\n}\n",
              "description": "\nThis code is a unit test method that uses the given() method from the RestAssured library to send a POST request to the command-side of the API gateway. The request includes the path to the endpoint for creating a new product, as well as the ID and name of the new product being created. The when() method specifies the port number for the API gateway and the then() method checks that the response code from the server is HTTP status 201 (Created)."
            },
            "name": "testA_PostAProduct",
            "location": {
              "start": 46,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 42,
                "end": 45
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 3
          },
          {
            "id": "8ceff99f-0019-b289-eb41-6f887a845d0a",
            "ancestors": [
              "c5eda495-8a67-d287-ea48-2286d3b7aca1"
            ],
            "type": "function",
            "description": "tests the `get()` method on a product resource, given its ID, and asserts that the response status code is `HttpStatus.SC_OK` and the name of the product in the body of the response matches a given value.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n    public void testB_GetAProduct(){\n        //given a product id\n        String id = \"1234\";\n        given().\n                port(Statics.PORT_FOR_GATEWAY).\n        when().\n                get(PRODUCTS_QRY_BASE_PATH + \"/{id}\", id).\n        then().\n                statusCode(HttpStatus.SC_OK).\n                body(\"name\", Matchers.is(\"End2End Test Product\"));\n    }\n",
              "description": ""
            },
            "name": "testB_GetAProduct",
            "location": {
              "start": 62,
              "insert": 57,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 56,
                "end": 60
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "Statics.java",
    "path": "integration-test/src/integration-test/java/com/soagrowers/utils/Statics.java",
    "content": {
      "structured": {
        "description": "Various constants and variables related to API endpoints, service IDs, and product information. It also sets production-related environment variables and provides messages for use in microservices.",
        "items": [
          {
            "id": "34e07d38-112e-ea86-c142-0104e319c489",
            "ancestors": [],
            "type": "function",
            "description": "provides static values and constants for various ports, service IDs, API versions, and message strings used by other classes in the package.\nFields:\n\t- PORT_FOR_GATEWAY (int): represents the default port number used by the gateway microservice to receive incoming requests.\n\t- PORT_FOR_COMMANDS (int): is set to 9000 in the Statics class.\n\t- PORT_FOR_QUERIES (int): represents the port number used by the Statics class for query requests.\n\t- PORT_FOR_DISCOVERY (int): represents the port number used for the discovery service in the given Java code.\n\t- PORT_FOR_CONFIG (int): in the Statics class represents the port number used by the configuration microservice.\n\t- QRY_SERVICE_ID (String): represents a unique identifier for the product query side of a microservice architecture.\n\t- CMD_SERVICE_ID (String): represents the identifier for the command-side microservice in the given Java code.\n\t- API (String): in the Statics class defines a set of endpoints for different services, including PRODUCTS_CMD_BASE_PATH and PRODUCTS_QRY_BASE_PATH for product-related commands and queries, respectively.\n\t- VERSION (String): in the Statics class represents an unknown value.\n\t- CMD_ROUTE (String): represents the path for product commands within the Statics class in Java.\n\t- QRY_ROUTE (String): represents the route for query endpoints in the Statics class.\n\t- PRODUCTS_CMD_BASE_PATH (String): represents the base path for accessing products-related commands in the microservice.\n\t- PRODUCTS_QRY_BASE_PATH (String): represents the base path for querying products in the application.\n\t- CMD_PRODUCT_ADD (String): represents the URL path for adding products in the PRODUCTION microservice configuration.\n\t- PROD_CMD_MESSAGE (String): contains a greeting message from the PRODUCT-COMMAND-SIDE microservice using the PRODUCTION config.\n\t- PROD_QRY_MESSAGE (String): in the Statics class is a message indicating greetings from the PRODUCT-QUERY-SIDE microservice using the PRODUCTION config.\n\t- LOCAL_CMD_MESSAGE (String): is \"Greetings from the PRODUCT-COMMAND-SIDE microservice [using the LOCALHOST config].\"\n\t- LOCAL_QRY_MESSAGE (String): contains a message indicating greetings from the PRODUCT-QUERY-SIDE microservice using the LOCALHOST config.\n\t- PRODUCTION (boolean): in Java's Statics class indicates whether the microservices are running in production mode or not, which is determined by the value of a system property set using System.getProperty(\"production\").\n\n",
            "fields": [
              {
                "name": "PORT_FOR_GATEWAY",
                "type_name": "int",
                "value": "8080",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the default port number used by the gateway microservice to receive incoming requests."
              },
              {
                "name": "PORT_FOR_COMMANDS",
                "type_name": "int",
                "value": "9000",
                "constant": true,
                "class_name": "Statics",
                "description": "is set to 9000 in the Statics class."
              },
              {
                "name": "PORT_FOR_QUERIES",
                "type_name": "int",
                "value": "9001",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the port number used by the Statics class for query requests."
              },
              {
                "name": "PORT_FOR_DISCOVERY",
                "type_name": "int",
                "value": "8761",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the port number used for the discovery service in the given Java code."
              },
              {
                "name": "PORT_FOR_CONFIG",
                "type_name": "int",
                "value": "8888",
                "constant": true,
                "class_name": "Statics",
                "description": "in the Statics class represents the port number used by the configuration microservice."
              },
              {
                "name": "QRY_SERVICE_ID",
                "type_name": "String",
                "value": "\"PRODUCT-QUERY-SIDE\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents a unique identifier for the product query side of a microservice architecture."
              },
              {
                "name": "CMD_SERVICE_ID",
                "type_name": "String",
                "value": "\"PRODUCT-COMMAND-SIDE\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the identifier for the command-side microservice in the given Java code."
              },
              {
                "name": "API",
                "type_name": "String",
                "value": "\"\"",
                "constant": true,
                "class_name": "Statics",
                "description": "in the Statics class defines a set of endpoints for different services, including PRODUCTS_CMD_BASE_PATH and PRODUCTS_QRY_BASE_PATH for product-related commands and queries, respectively."
              },
              {
                "name": "VERSION",
                "type_name": "String",
                "value": "\"\"",
                "constant": true,
                "class_name": "Statics",
                "description": "in the Statics class represents an unknown value."
              },
              {
                "name": "CMD_ROUTE",
                "type_name": "String",
                "value": "\"/commands\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the path for product commands within the Statics class in Java."
              },
              {
                "name": "QRY_ROUTE",
                "type_name": "String",
                "value": "\"/queries\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the route for query endpoints in the Statics class."
              },
              {
                "name": "PRODUCTS_CMD_BASE_PATH",
                "type_name": "String",
                "value": "API + VERSION + CMD_ROUTE + \"/products\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the base path for accessing products-related commands in the microservice."
              },
              {
                "name": "PRODUCTS_QRY_BASE_PATH",
                "type_name": "String",
                "value": "API + VERSION + QRY_ROUTE + \"/products\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the base path for querying products in the application."
              },
              {
                "name": "CMD_PRODUCT_ADD",
                "type_name": "String",
                "value": "\"/add\"",
                "constant": true,
                "class_name": "Statics",
                "description": "represents the URL path for adding products in the PRODUCTION microservice configuration."
              },
              {
                "name": "PROD_CMD_MESSAGE",
                "type_name": "String",
                "value": "\"Greetings from the PRODUCT-COMMAND-SIDE microservice [using the PRODUCTION config].\"",
                "constant": true,
                "class_name": "Statics",
                "description": "contains a greeting message from the PRODUCT-COMMAND-SIDE microservice using the PRODUCTION config."
              },
              {
                "name": "PROD_QRY_MESSAGE",
                "type_name": "String",
                "value": "\"Greetings from the PRODUCT-QUERY-SIDE microservice [using the PRODUCTION config].\"",
                "constant": true,
                "class_name": "Statics",
                "description": "in the Statics class is a message indicating greetings from the PRODUCT-QUERY-SIDE microservice using the PRODUCTION config."
              },
              {
                "name": "LOCAL_CMD_MESSAGE",
                "type_name": "String",
                "value": "\"Greetings from the PRODUCT-COMMAND-SIDE microservice [using the LOCALHOST config].\"",
                "constant": true,
                "class_name": "Statics",
                "description": "is \"Greetings from the PRODUCT-COMMAND-SIDE microservice [using the LOCALHOST config].\""
              },
              {
                "name": "LOCAL_QRY_MESSAGE",
                "type_name": "String",
                "value": "\"Greetings from the PRODUCT-QUERY-SIDE microservice [using the LOCALHOST config].\"",
                "constant": true,
                "class_name": "Statics",
                "description": "contains a message indicating greetings from the PRODUCT-QUERY-SIDE microservice using the LOCALHOST config."
              },
              {
                "name": "PRODUCTION",
                "type_name": "boolean",
                "value": "Boolean.valueOf(System.getProperty(\"production\", \"true\"))",
                "constant": true,
                "class_name": "Statics",
                "description": "in Java's Statics class indicates whether the microservices are running in production mode or not, which is determined by the value of a system property set using System.getProperty(\"production\")."
              }
            ],
            "name": "Statics",
            "location": {
              "start": 6,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 2,
                "end": 5
              }
            },
            "item_type": "class",
            "length": 28,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "Application.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/Application.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application with Eureka client enabled, entity scanning for domain classes, and REST controllers for service instances and message retrieval. The application main method starts the spring application using the `SpringApplication.run()` method, and the `discoveryClient` class provides RESTful access to service instances by application name. The `MessageRestController` class provides a GET request endpoint for retrieving a message with the value set through the `@Value` annotation.",
        "items": [
          {
            "id": "ca503022-8a64-d293-6740-14687b0546f1",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that enables Eureka client functionality and scans the domain package for entity configuration. It also includes a REST controller for retrieving service instances by application name and a message REST controller for retrieving a fixed message.",
            "name": "Application",
            "location": {
              "start": 22,
              "insert": 18,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 17,
                "end": 20
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 3
          },
          {
            "id": "de751f60-a9f4-4ba4-aa43-e0de052c05e7",
            "ancestors": [
              "ca503022-8a64-d293-6740-14687b0546f1"
            ],
            "type": "function",
            "description": "starts a Spring application by running the `Application` class using `SpringApplication.run`.",
            "params": [],
            "name": "main",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6dc8fa2f-a215-44bb-8046-60dbcf58f809",
            "ancestors": [],
            "type": "function",
            "description": "is a RESTful controller that retrieves a list of ServiceInstances associated with a specific application name using the DiscoveryClient. The controller method serviceInstancesByApplicationName() takes no arguments and returns a list of ServiceInstances.",
            "name": "ServiceInstanceRestController",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 14,
            "docLength": null
          },
          {
            "id": "557b79b7-f45d-f9b1-394b-4df5e557ecf6",
            "ancestors": [
              "6dc8fa2f-a215-44bb-8046-60dbcf58f809"
            ],
            "type": "function",
            "description": "retrieves a list of service instances associated with a specified application name using the Discovery Client API.",
            "params": [],
            "returns": {
              "type_name": "ListServiceInstance",
              "description": "a list of ServiceInstances associated with the specified application name.\n\n* List<ServiceInstance>: The function returns a list of service instances for a given application name.\n* ServiceInstance: Each element in the list represents a service instance, which contains information about the instance, such as its ID, hostname, and status.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired DiscoveryClient discoveryClient;\n@Value(\"${spring.application.name}\") private String appName;\n\nList<ServiceInstance> instances = discoveryClient.getInstances(appName);\n",
              "description": "\nThis code will return a list of Service Instance objects, which can then be used to access information about each instance such as the instance id, hostname, and port number."
            },
            "name": "serviceInstancesByApplicationName",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "93fcd025-3433-9488-b94d-d101e163768c",
            "ancestors": [],
            "type": "function",
            "description": "is a RESTful controller that provides a `getMessage()` function that retrieves a predefined message based on a Spring Boot application's configuration file.",
            "name": "MessageRestController",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 12,
            "docLength": null
          },
          {
            "id": "fe276d82-238c-76b3-b64e-8d69eed2b844",
            "ancestors": [
              "93fcd025-3433-9488-b94d-d101e163768c"
            ],
            "type": "function",
            "description": "retrieves and returns a predefined string message.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string containing the message \"Hello, World!\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "import org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@RestController\nclass Example {\n    @Autowired\n    private MessageRestController messageRestController;\n\n    @RequestMapping(\"/example\")\n    public String example() {\n        return this.messageRestController.getMessage();\n    }\n}\n",
              "description": ""
            },
            "name": "getMessage",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AxonConfiguration.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/configuration/AxonConfiguration.java",
    "content": {
      "structured": {
        "description": "An Axon configuration class that sets up an AMQP event handling system using Spring AMQP framework. It includes various annotations and configuration classes to define connection factory, transaction manager, unique queue name, and terminal name. Additionally, it provides a Jackson serializer for Axon JSON serialization and sets up a simple cluster and event bus using the Spring AMQP consumer configuration.",
        "items": [
          {
            "id": "bc6b67c1-0975-89a1-b742-ce17850e5713",
            "ancestors": [],
            "type": "function",
            "description": "defines various configurations for an AMQP event bus, including connection factory, transaction manager, and queue name. It also provides methods to create a SimpleCluster, SpringAMQPConsumerConfiguration, and EventBusTerminal, as well as an EventBus instance.",
            "name": "AxonConfiguration",
            "location": {
              "start": 19,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 15,
                "end": 18
              }
            },
            "item_type": "class",
            "length": 77,
            "docLength": 3
          },
          {
            "id": "22806e5c-09c7-6194-d24a-e2e613614c4b",
            "ancestors": [
              "bc6b67c1-0975-89a1-b742-ce17850e5713"
            ],
            "type": "function",
            "description": "returns a Jackson serializer for JSON data.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a Jackson Serializer instance for JSON serialization.\n\n* `JacksonSerializer`: The class that implements the serialization functionality using Jackson library.\n* `new`: The operator used to create a new instance of the `JacksonSerializer` class.\n\nTherefore, the output is a newly created instance of the `JacksonSerializer` class.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    JacksonSerializer axonJsonSerializer() {\n        return new JacksonSerializer();\n    }\n",
              "description": ""
            },
            "name": "axonJsonSerializer",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "d856967c-db29-ecb0-bf46-0768cc364a55",
            "ancestors": [
              "bc6b67c1-0975-89a1-b742-ce17850e5713"
            ],
            "type": "function",
            "description": "creates a new `ListenerContainerLifecycleManager` instance, sets its `connectionFactory` property to a provided value, and returns the instance.",
            "params": [],
            "returns": {
              "type_name": "ListenerContainerLifecycleManager",
              "description": "a `ListenerContainerLifecycleManager` instance with a set `connectionFactory`.\n\n* `ListenerContainerLifecycleManager`: This is the class that represents a container for managing listeners. It provides methods to register, unregister, and check if a listener is registered.\n* `setConnectionFactory()`: This method sets the connection factory used by the listener container lifecycle manager. The connection factory is responsible for creating connections to the database.\n\nOverall, this function returns a `ListenerContainerLifecycleManager` object that can be used to manage listeners in a Spring Boot application.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    ListenerContainerLifecycleManager listenerContainerLifecycleManager() {\n        ListenerContainerLifecycleManager listenerContainerLifecycleManager = new ListenerContainerLifecycleManager();\n        listenerContainerLifecycleManager.setConnectionFactory(connectionFactory);\n        return listenerContainerLifecycleManager;\n    }\n",
              "description": ""
            },
            "name": "listenerContainerLifecycleManager",
            "location": {
              "start": 53,
              "insert": 53,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "6d9fcaf9-22f8-ac92-dc44-54781c798425",
            "ancestors": [
              "bc6b67c1-0975-89a1-b742-ce17850e5713"
            ],
            "type": "function",
            "description": "creates a Spring AMQP consumer configuration with settings for message size, transaction manager, and queue name.",
            "params": [],
            "returns": {
              "type_name": "SpringAMQPConsumerConfiguration",
              "description": "a Spring AMQP consumer configuration object with settings for transaction size, transaction manager, and queue name.\n\n* `setTxSize(10)` sets the transaction size limit for the consumer. This value determines how much data can be consumed before a new transaction is started.\n* `setTransactionManager(transactionManager)` specifies the transaction manager to be used by the consumer. This is an important configuration option as it determines how transactions are managed and rolled back in case of failure.\n* `setQueueName(uniqueQueueName)` sets the name of the queue that the consumer will subscribe to. This value is used to identify the queue and differentiate it from other queues in the same broker.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    SpringAMQPConsumerConfiguration springAMQPConsumerConfiguration() {\n        SpringAMQPConsumerConfiguration amqpConsumerConfiguration = new SpringAMQPConsumerConfiguration();\n        amqpConsumerConfiguration.setTxSize(10);\n        amqpConsumerConfiguration.setTransactionManager(transactionManager);\n        amqpConsumerConfiguration.setQueueName(uniqueQueueName);\n        return amqpConsumerConfiguration;\n    }\n",
              "description": ""
            },
            "name": "springAMQPConsumerConfiguration",
            "location": {
              "start": 60,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "ca764205-72b7-3597-604a-5775c135958b",
            "ancestors": [
              "bc6b67c1-0975-89a1-b742-ce17850e5713"
            ],
            "type": "function",
            "description": "creates a new `SimpleCluster` instance and sets the `AMQP_CONFIG_KEY` property of its metadata with the provided `SpringAMQPConsumerConfiguration`.",
            "params": [
              {
                "name": "springAMQPConsumerConfiguration",
                "type_name": "SpringAMQPConsumerConfiguration",
                "description": "configuration for an AMQP consumer in Spring, which is used to customize the behavior of the AMQP consumer within the SimpleCluster framework.\n\n1. AMQP_CONFIG_KEY: This is a property that sets the configuration for an AMQP consumer in the Spring framework.\n2. UniqueQueueName: This is a string representing the name of the unique queue to be created for the consumer.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SimpleCluster",
              "description": "a new SimpleCluster instance with an AMQP configuration property set.\n\n* The `SimpleCluster` object represents a cluster of AMQP consumers that can handle messages from an AMQP queue.\n* The `uniqueQueueName` property is set to a unique identifier for the queue, which is used to distinguish it from other queues in the cluster.\n* The `MetaData` property is set to a map of configuration properties for the consumer, which are obtained from the `springAMQPConsumerConfiguration` parameter passed to the function. These properties can be used to customize the behavior of the consumer.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    SimpleCluster simpleCluster(SpringAMQPConsumerConfiguration springAMQPConsumerConfiguration) {\n        SimpleCluster simpleCluster = new SimpleCluster(uniqueQueueName);\n        simpleCluster.getMetaData().setProperty(AMQP_CONFIG_KEY, springAMQPConsumerConfiguration);\n        return simpleCluster;\n    }\n",
              "description": ""
            },
            "name": "simpleCluster",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "74e0371e-a536-cca8-6744-fd68eb85a4d6",
            "ancestors": [
              "bc6b67c1-0975-89a1-b742-ce17850e5713"
            ],
            "type": "function",
            "description": "creates an instance of `SpringAMQPTerminal`, setting various properties and returning it.",
            "params": [],
            "returns": {
              "type_name": "SpringAMQPTerminal",
              "description": "a Spring AMQP terminal instance configured with various properties and settings.\n\n* The `SpringAMQPTerminal` object represents a Spring AMQP terminal, which provides an interface for sending and receiving messages through an AMQP broker.\n* The `setConnectionFactory` method sets the connection factory used to connect to the AMQP broker.\n* The `setSerializer` methods sets the serializer used to serialize messages before sending them through the broker. The default is `axonJsonSerializer`, which uses JSON to serialize messages.\n* The `setExchangeName` method sets the name of the exchange on which the terminal will send and receive messages.\n* The `setListenerContainerLifecycleManager` method sets the listener container lifecycle manager, which manages the creation and destruction of message listeners.\n* The `durable` property indicates whether the terminal is durable or not, meaning whether the messages sent through it will be persisted in case of a failure.\n* The `transactional` property indicates whether the terminal is transactional or not, meaning whether the messages sent through it will be part of a larger transaction.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    EventBusTerminal terminal() {\n        SpringAMQPTerminal terminal = new SpringAMQPTerminal();\n        // Connection factory is set to a connection factory created earlier.\n        terminal.setConnectionFactory(connectionFactory);\n        // The serializer is set to axonJsonSerializer, which is also created in this class.\n        terminal.setSerializer(axonJsonSerializer());\n        // The name of the exchange is set to the variable terminalName.\n        terminal.setExchangeName(terminalName);\n        // The listenerContainerLifecycleManager is set to a listenerContainerLifecycleManager created earlier.\n        terminal.setListenerContainerLifecycleManager(listenerContainerLifecycleManager());\n        // The exchange is set as durable, meaning it will survive even if the server restarts. \n        terminal.setDurable(true);\n        // The transactional attribute is set to true, making the event bus transactional.\n        terminal.setTransactional(true);\n        return terminal;\n    }\n",
              "description": ""
            },
            "name": "terminal",
            "location": {
              "start": 77,
              "insert": 77,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "1f7d72c5-c453-8299-8641-f01a618561bb",
            "ancestors": [
              "bc6b67c1-0975-89a1-b742-ce17850e5713"
            ],
            "type": "function",
            "description": "creates an EventBus instance by combining a custom cluster selector with the default terminal. The resulting EventBus enables the transmission of events between different components in a clustered environment.",
            "params": [
              {
                "name": "simpleCluster",
                "type_name": "SimpleCluster",
                "description": "cluster manager for which the event bus is to be created\n\n* `SimpleCluster`: This class is the base class for all clusters in the application. It contains various attributes such as `id`, `name`, `type`, and `nodes`.\n* `DefaultClusterSelector`: This class implements the `ClusterSelector` interface, which defines the methods for selecting a cluster based on the input parameters.\n* `terminal()`: This method returns a terminal object, which is used to indicate the end of the stream in the `EventBus` implementation.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EventBus",
              "description": "a ClusteringEventBus instance, which is used to handle events related to cluster management.\n\n* `SimpleCluster`: This is an argument passed to the function, which represents the cluster configuration for the event bus.\n* `ClusteringEventBus`: This is the type of event bus returned by the function, which is a custom implementation of an event bus that uses a default cluster selector and terminator.\n* `DefaultClusterSelector`: This is another argument passed to the function, which represents the default cluster selector used by the event bus.\n* `terminal()`: This is a method called internally within the function to generate the event bus. It returns a terminal object, which is an implementation detail not intended for external use.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\nEventBus eventBus(SimpleCluster simpleCluster) {\n  return new ClusteringEventBus(new DefaultClusterSelector(simpleCluster), terminal());\n}\n",
              "description": ""
            },
            "name": "eventBus",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "RabbitConfiguration.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/configuration/RabbitConfiguration.java",
    "content": {
      "structured": {
        "description": "A RabbitMQ configuration class that sets up a RabbitMQ exchange, queue, and binding. The class uses the Spring Boot Annotation-Driven configuration framework and requires other beans to be defined before it can be used. The configuration creates an event bus exchange, declares a unique queue name based on an index value, and defines a fanout exchange for routing messages to multiple queues.",
        "items": [
          {
            "id": "33d29d24-e70b-2b90-3640-44e48bafe9c5",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring configuration class that sets up a RabbitMQ environment for an application. It defines various properties and beans related to RabbitMQ, such as the hostname, username, password, exchange name, queue name, and index. The class also provides methods for creating queues and exchanges, as well as declaring bindings between them. Overall, the class sets up a basic RabbitMQ environment for an application to use.",
            "name": "RabbitConfiguration",
            "location": {
              "start": 18,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 14,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 61,
            "docLength": 3
          },
          {
            "id": "3beb0721-d745-c9a6-8b4d-19a30397b5b4",
            "ancestors": [
              "33d29d24-e70b-2b90-3640-44e48bafe9c5"
            ],
            "type": "function",
            "description": "generates a unique name for a queue by combining the given queue name with an incremental index number, resulting in a distinct identifier for each queue.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representation of a unique queue name, constructed by combining the original queue name and an incrementing index number.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    public String uniqueQueueName() {\n        return queueName + \".\" + index;\n    }\n    \n    @Autowired\n    private RabbitAdmin rabbitAdmin; //This will be injected by Spring\n  \n    @PostConstruct\n    public void init() {\n        rabbitAdmin.declareExchange(eventBusExchange()); //Declare the exchange in rabbitMQ using this method \n        rabbitAdmin.declareQueue(eventStream(uniqueQueueName())); //Declare the queue using this method \n        rabbitAdmin.declareBinding(binding(uniqueQueueName())); // Declare the binding between the queue and the exchange using this method \n    }\n",
              "description": ""
            },
            "name": "uniqueQueueName",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "dbe359b0-c4a2-1995-664f-28e33668e4fa",
            "ancestors": [
              "33d29d24-e70b-2b90-3640-44e48bafe9c5"
            ],
            "type": "function",
            "description": "creates a new `Queue` instance with a specified unique name, allowing for message storage and retrieval.",
            "params": [
              {
                "name": "uniqueQueueName",
                "type_name": "String",
                "description": "name of the queue that is being created.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Queue",
              "description": "a `Queue` object with the specified unique name and properties.\n\nThe function returns a `Queue` object with a unique name provided as input. The `false` argument in the constructor indicates that the queue is not durable, meaning messages will be lost if the node where the queue is located fails. Additionally, the `false` argument for the `autoStart` property means that the queue will not start automatically when the node boots up. Finally, the `true` argument for the `cancellationHandled` property indicates that cancellations are handled correctly.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import org.springframework.context.annotation.Bean;\n\npublic class ExampleClass {\n    @Bean\n    public Queue eventStream(String uniqueQueueName) {\n        return new Queue(uniqueQueueName, false, false, true);\n    }\n}\n",
              "description": "\nIn this example, the method `eventStream()` is annotated with `@Bean`, indicating that it should be used as a Spring Bean. The method takes a single input argument of type `String`, which is called `uniqueQueueName`.\n\nTo use this method in a Spring application context, you would need to define a bean for the class `ExampleClass` and then call the method on an instance of that class to get the desired output. For example:\n"
            },
            "name": "eventStream",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "5d0d75dc-e7ec-829e-2044-79957e2253a1",
            "ancestors": [
              "33d29d24-e70b-2b90-3640-44e48bafe9c5"
            ],
            "type": "function",
            "description": "creates a new `FanoutExchange` instance with the specified `exchangeName`, set to `true` for fanout routing and set to `false` for non-fanout routing.",
            "params": [],
            "returns": {
              "type_name": "FanoutExchange",
              "description": "a new `FanoutExchange` instance with the specified name and parameters.\n\nThe `FanoutExchange` object returned by the function has an `exchangeName` property that specifies the name of the exchange.\nThe `true` value for the `isFanout` property indicates that the exchange is a fanout exchange.\nThe `false` value for the `isTemporary` property means that the exchange is not temporary.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\nFanoutExchange eventBusExchange() {\nreturn new FanoutExchange(exchangeName, true, false);\n}\n",
              "description": ""
            },
            "name": "eventBusExchange",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "1aac36cc-595a-09b4-1d42-a0c4bf8ee220",
            "ancestors": [
              "33d29d24-e70b-2b90-3640-44e48bafe9c5"
            ],
            "type": "function",
            "description": "creates a binding for a queue with a unique name, specifying the destination type as `QUEUE`, the exchange name, and the wildcard character `*.*`.",
            "params": [
              {
                "name": "uniqueQueueName",
                "type_name": "String",
                "description": "name of the queue to which messages will be bound.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Binding",
              "description": "a binding definition that sets up a queue with the specified name and destination type.\n\n* `uniqueQueueName`: The unique name of the queue to which the binding is created.\n* `Binding.DestinationType.QUEUE`: The type of destination, in this case, a queue.\n* `exchangeName`: The name of the exchange where the binding is created.\n* ` \"*.*\"`: The routing key pattern for the binding, indicating that the message should be routed to any queue with the same name as the original message.\n* `null`: The value of the `routingKey` attribute is null, indicating that no specific routing key is specified.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic Binding getBinding(String uniqueQueueName) {\n    return new Binding(uniqueQueueName, Binding.DestinationType.QUEUE, exchangeName, \"*.*\", null);\n}\n",
              "description": ""
            },
            "name": "binding",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "30cae458-20bc-2dbc-0942-723780eca79e",
            "ancestors": [
              "33d29d24-e70b-2b90-3640-44e48bafe9c5"
            ],
            "type": "function",
            "description": "creates a `CachingConnectionFactory` instance with customized configuration for a database connection, storing it for later use.",
            "params": [],
            "returns": {
              "type_name": "ConnectionFactory",
              "description": "a caching ConnectionFactory instance configured with the specified hostname, username, and password.\n\n* The `CachingConnectionFactory` object created is of type `hostname`.\n* The `setUsername()` and `setPassword()` methods are called on the object to set the values of the `username` and `password` attributes, respectively.\n\nOverall, the function returns a `CachingConnectionFactory` object with the specified `hostname`, `username`, and `password` properties.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory(hostname);\ncachingConnectionFactory.setUsername(username);\ncachingConnectionFactory.setPassword(password);\nreturn cachingConnectionFactory;\n",
              "description": ""
            },
            "name": "connectionFactory",
            "location": {
              "start": 60,
              "insert": 60,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "2686852f-5724-de8b-6f45-53afeddd87ab",
            "ancestors": [
              "33d29d24-e70b-2b90-3640-44e48bafe9c5"
            ],
            "type": "function",
            "description": "creates a new `RabbitAdmin` instance, sets auto-startup to true, declares an exchange, queue, and binding using the provided unique queue name.",
            "params": [
              {
                "name": "uniqueQueueName",
                "type_name": "String",
                "description": "name of a unique queue that is declared and managed by the `RabbitAdmin` instance generated by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "RabbitAdmin",
              "description": "a `RabbitAdmin` instance that sets up and manages RabbitMQ exchanges, queues, and bindings.\n\n1. `RabbitAdmin rabbitAdmin`: This is the instance of the `RabbitAdmin` class that is returned by the function. It represents a RabbitMQ administrator that can be used to manage queues, exchanges, and other rabbitmq resources.\n2. `connectionFactory()`: This is a method that returns a connection factory object, which is used to connect to the RabbitMQ server. The connection factory object is responsible for creating and managing connections to the RabbitMQ server.\n3. `setAutoStartup(true)`: This method sets whether the RabbitMQ administrator should automatically start up when the application starts.\n4. `declareExchange(eventBusExchange())`: This method declares an exchange with the specified name, which is used to route messages between queues and exchanges.\n5. `declareQueue(eventStream(uniqueQueueName))`: This method declares a queue with the specified name, which is used to store messages that are consumed by a consumer.\n6. `declareBinding(binding(uniqueQueueName))`: This method declares a binding between a queue and an exchange, which specifies how messages are routed from the queue to the exchange.\n\nOverall, the `rabbitAdmin` function provides a way to manage RabbitMQ resources in a Java application, including creating and managing queues, exchanges, and bindings.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n    @Required\n    RabbitAdmin rabbitAdmin(String uniqueQueueName) {\n        RabbitAdmin admin = new RabbitAdmin(connectionFactory());\n        admin.setAutoStartup(true);\n        admin.declareExchange(eventBusExchange());\n        admin.declareQueue(eventStream(uniqueQueueName));\n        admin.declareBinding(binding(uniqueQueueName));\n        return admin;\n    }\n",
              "description": "\nThe method will take the unique queue name as an input and it will create a new RabbitAdmin instance with the connection factory. Then it will set the auto startup to true, declare the exchange and queue, and declare the binding. Finally, the method will return the created rabbit admin."
            },
            "name": "rabbitAdmin",
            "location": {
              "start": 68,
              "insert": 68,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Product.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/domain/Product.java",
    "content": {
      "structured": {
        "description": "An entity called `Product` with attributes `id`, `name`, and `saleable`. The class also provides constructors and methods for setting and retrieving these attributes. The `@Entity` annotation indicates that this class is a part of a larger Java Persistence API (JPA) project, and the `@Id` annotation identifies the `id` attribute as the primary key for the entity.",
        "items": [
          {
            "id": "ab9dc456-f03c-12b7-5b42-bb311e734a6f",
            "ancestors": [],
            "type": "function",
            "description": "is an entity in Java, representing a product with an ID, name, and saleability flag. The class has constructor and getter/setter methods for each field.",
            "name": "Product",
            "location": {
              "start": 12,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 8,
                "end": 11
              }
            },
            "item_type": "class",
            "length": 42,
            "docLength": 3
          },
          {
            "id": "91a7ceb8-a900-2eac-ac44-1dbc6347dbc0",
            "ancestors": [
              "ab9dc456-f03c-12b7-5b42-bb311e734a6f"
            ],
            "type": "function",
            "description": "retrieves the `id` field value associated with an object instance and returns it as a string.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the `id` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Product product = new Product(\"123456\", \"product name\", true);\nString id = product.getId(); // This will return \"123456\" as the ID of the product.\n",
              "description": ""
            },
            "name": "getId",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "dea43c6f-e6df-769c-df45-3b9024f69bdd",
            "ancestors": [
              "ab9dc456-f03c-12b7-5b42-bb311e734a6f"
            ],
            "type": "function",
            "description": "sets the `id` field of an object to a given `String` value.",
            "params": [
              {
                "name": "id",
                "type_name": "String",
                "description": "value that will be assigned to the `id` field of the class instance being modified by the function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Product product = new Product();\nproduct.setId(\"1\");\n",
              "description": ""
            },
            "name": "setId",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d57af240-de23-a190-194e-0edd7058f55e",
            "ancestors": [
              "ab9dc456-f03c-12b7-5b42-bb311e734a6f"
            ],
            "type": "function",
            "description": "returns a string representing the name of an object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the name of an object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Product product = new Product(\"123\", \"name\", false);\nSystem.out.println(product.getName()); \n",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "55652aac-06fd-ae92-1146-d5fe09229ae2",
            "ancestors": [
              "ab9dc456-f03c-12b7-5b42-bb311e734a6f"
            ],
            "type": "function",
            "description": "sets the value of the class instance variable `name`.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "new value of the `name` field for the object being modified by the `setName()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Product product = new Product(\"123\", \"iPhone 12 Pro\", true);\nproduct.setName(\"Apple Watch Series 8\");\n",
              "description": "\nThe variable product is created by setting its id, name, and saleable attributes to their corresponding values using the constructor. The method setName is then called on the instance of the product object with a new name as an argument (\"Apple Watch Series 8\"). After this operation, the name attribute of the product instance will be changed to \"Apple Watch Series 8\"."
            },
            "name": "setName",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3070fd63-4d85-8fbb-7942-0c0d8940d6b9",
            "ancestors": [
              "ab9dc456-f03c-12b7-5b42-bb311e734a6f"
            ],
            "type": "function",
            "description": "evaluates to `true` if the object being passed as a parameter is `saleable`, and `false` otherwise.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether an item is saleable or not.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Product p = new Product(\"id\", \"name\", true);\nSystem.out.println(p.isSaleable()); //outputs: true\n",
              "description": ""
            },
            "name": "isSaleable",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4cf22577-5890-9d9f-8a47-922735ccb6a2",
            "ancestors": [
              "ab9dc456-f03c-12b7-5b42-bb311e734a6f"
            ],
            "type": "function",
            "description": "updates the `saleable` field of the current object by assigning a new boolean value.",
            "params": [
              {
                "name": "saleable",
                "type_name": "boolean",
                "description": "Boolean value that determines whether an object is saleable or not, which is then stored in the `this.saleable` field.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// set saleability to false\nproduct.setSaleable(false);\n",
              "description": ""
            },
            "name": "setSaleable",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "EventLoggingHandler.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/handlers/EventLoggingHandler.java",
    "content": {
      "structured": {
        "description": "An EventLoggingHandler class that handles events generated by ProductEvents. It uses Spring Framework's @Value annotation to retrieve a value from a properties file and logs messages to the SLF4J logger with the event details, including the event class name, id, and name. The class also has three event handlers for ProductAddedEvent, ProductSaleableEvent, and ProductUnsaleableEvent.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productevents.events.AbstractEvent Pages: 1 -->\n<svg width=\"572pt\" height=\"134pt\"\n viewBox=\"0.00 0.00 572.00 134.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 130)\">\n<title>com.soagrowers.productevents.events.AbstractEvent</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"319,-78 110,-78 110,-48 319,-48 319,-78\"/>\n<text text-anchor=\"start\" x=\"118\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"214.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractEvent</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductAddedEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-126 355,-126 355,-96 564,-96 564,-126\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-114\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-103\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAddedEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-80.03C328.09,-85.24 356.9,-90.93 382.55,-96\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"302.21,-76.56 291.72,-78.06 300.85,-83.43 302.21,-76.56\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductSaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-78 355,-78 355,-48 564,-48 564,-78\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductSaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M329.48,-63C337.9,-63 346.36,-63 354.7,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"329.26,-59.5 319.26,-63 329.26,-66.5 329.26,-59.5\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1ProductUnsaleableEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"564,-30 355,-30 355,0 564,0 564,-30\"/>\n<text text-anchor=\"start\" x=\"363\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"459.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductUnsaleableEvent</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M301.7,-45.97C328.09,-40.76 356.9,-35.07 382.55,-30\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"300.85,-42.57 291.72,-47.94 302.21,-49.44 300.85,-42.57\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-72.5 0,-72.5 0,-53.5 74,-53.5 74,-72.5\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-60.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.49,-63C92.48,-63 101.06,-63 109.86,-63\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.36,-59.5 74.36,-63 84.36,-66.5 84.36,-59.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "80c24f72-60cd-dfa9-3541-efaa9c8c3121",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring-based component that handles various product-related events such as ProductAddedEvent, ProductSaleableEvent, and ProductUnsaleableEvent. The class logs the event details, including the instance ID, event class name, and event ID, using the SLF4J logger.",
            "name": "EventLoggingHandler",
            "location": {
              "start": 17,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 11,
                "end": 16
              }
            },
            "item_type": "class",
            "length": 23,
            "docLength": 5
          },
          {
            "id": "fa63f950-74e5-9b9a-f742-81b320dd6f28",
            "ancestors": [
              "80c24f72-60cd-dfa9-3541-efaa9c8c3121"
            ],
            "type": "function",
            "description": "logs information to the log when a `ProductAddedEvent` is triggered.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductAddedEvent",
                "description": "ProductAddedEvent that triggered the function execution, providing the class name and ID of the event, as well as the event name.\n\n* `indexId`: An integer representing the index of the event in the handling method's argument list.\n* `event.getClass().getSimpleName()`: The simple name of the class that `event` belongs to.\n* `event.getId()`: An integer representing the unique identifier of the event.\n* `event.getName()`: A string representing the human-readable name of the event.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventHandler \npublic void handle(ProductAddedEvent event) {\nLOG.debug(\"Instance:[{}] Event:{} Id:{} Name:'{}'\", indexId, event.getClass().getSimpleName(), event.getId(), event.getName());\n}\n",
              "description": "\nIn this example, the handle method would be called with a ProductAddedEvent object as an argument. When called, it will extract the index id, class name of the event, and id and name of the product from the event. Then it logs these values to the debug level using the LoggerFactory.getLogger(EventLoggingHandler.class) method."
            },
            "name": "handle",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "33eb2a98-3788-76a5-504f-49a5c1a2e857",
            "ancestors": [
              "80c24f72-60cd-dfa9-3541-efaa9c8c3121"
            ],
            "type": "function",
            "description": "within the `@EventHandler` annotation listens to the `ProductSaleableEvent` and logs the event details, including the instance ID and event class name.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductSaleableEvent",
                "description": "ProductSaleableEvent object that was generated by an event listener and is passed to the `handle()` method for processing.\n\n* `indexId`: A unique identifier for this event instance.\n* `event`: The type of event being handled (e.g., \"ProductSaleableEvent\").\n* `id`: A specific ID assigned to this event instance.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventHandler\n    public void handle(ProductSaleableEvent event) {\n        LOG.debug(\"Instance:[{}] Event:{} Id:{}\", indexId, event.getClass().getSimpleName(), event.getId());\n    }\n",
              "description": "\nThe method handle takes one argument (event), which is of type ProductSaleableEvent. When this method is called by the Axon framework with an instance of ProductSaleableEvent as its argument, it will log a debug message to the console using the SLF4J Logger class. The message includes information about the event, such as the event's class name and ID.\nThe value of indexId is set to the value of the spring.application.index variable in the application configuration file. This value is used to identify which instance of the application is logging the event."
            },
            "name": "handle",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "1f35903d-ee94-a29f-1d45-89fdbef01984",
            "ancestors": [
              "80c24f72-60cd-dfa9-3541-efaa9c8c3121"
            ],
            "type": "function",
            "description": "is called when an event indicating a product is unsaleable occurs. It logs information about the event, including the class name and ID.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductUnsaleableEvent",
                "description": "ProductUnsaleableEvent that triggered the function execution.\n\n* `LOG`: This is an instance of a class that represents a log4j logger. It allows for logging messages to be sent to the console or other output streams.\n* `indexId`: This is an integer value representing the index of the event in question.\n* `event`: This is a deserialized object representing the `ProductUnsaleableEvent` class. Its properties can be accessed and used as needed.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventHandler\npublic void handle(ProductUnsaleableEvent event) {\n    LOG.debug(\"Instance:[{}] Event:{} Id:{}\", indexId, event.getClass().getSimpleName(), event.getId());\n}\n",
              "description": "\nThis method would be called whenever a ProductUnsaleableEvent is sent to the application. When this happens, the method will be triggered and the LOG.debug message will be printed to the console, with the index ID, the name of the Event, and the ID of the event passed into the handle method."
            },
            "name": "handle",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductViewEventHandler.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/handlers/ProductViewEventHandler.java",
    "content": {
      "structured": {
        "description": "an event handler class called ProductViewEventHandler that handles events related to products in a product query domain. The class is annotated with Spring's @Component and Axon Framework's @EventHandler annotations. It contains methods to handle three types of events: ProductAddedEvent, ProductSaleableEvent, and ProductUnsaleableEvent. These methods save the updated product information in the ProductRepository after handling each event. The class also implements the ReplayAware interface, which is used to clear the view before replaying the events.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productevents.events.ProductAddedEvent Pages: 1 -->\n<svg width=\"217pt\" height=\"159pt\"\n viewBox=\"0.00 0.00 217.00 159.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 155)\">\n<title>com.soagrowers.productevents.events.ProductAddedEvent</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"209,-30 0,-30 0,0 209,0 209,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"104.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductAddedEvent</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1soagrowers_1_1productevents_1_1events_1_1AbstractEvent.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"209,-96 0,-96 0,-66 209,-66 209,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productevents.events.</text>\n<text text-anchor=\"middle\" x=\"104.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AbstractEvent</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M104.5,-55.54C104.5,-46.96 104.5,-37.61 104.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"101,-55.8 104.5,-65.8 108,-55.8 101,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"141.5,-151 67.5,-151 67.5,-132 141.5,-132 141.5,-151\"/>\n<text text-anchor=\"middle\" x=\"104.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M104.5,-121.65C104.5,-113.36 104.5,-103.78 104.5,-96.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"101,-121.87 104.5,-131.87 108,-121.87 101,-121.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "92ff62d8-55e2-8899-2c46-6efd68ea8c74",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling various events related to products in a system. It listens to events such as product addition, saleability changes, and unSALEability changes, and updates the product repository accordingly. The class also provides methods for clearing the view before replaying events and logging information during event handling.",
            "name": "ProductViewEventHandler",
            "location": {
              "start": 18,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 14,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 51,
            "docLength": 3
          },
          {
            "id": "7f7495d7-08ec-8192-a249-ea95bda4ce4a",
            "ancestors": [
              "92ff62d8-55e2-8899-2c46-6efd68ea8c74"
            ],
            "type": "function",
            "description": "is an EventHandler that processes a `ProductAddedEvent`. It saves the product to the repository with its ID and name.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductAddedEvent",
                "description": "`ProductAddedEvent` object that triggered the function, providing its ID and name as additional information.\n\n* `event.getId()`: The unique identifier of the event.\n* `event.getName()`: The name of the product added.\n* `event.getId()`: The ID of the product added.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "ProductAddedEvent event = new ProductAddedEvent();\nevent.setId(\"1234567890\");\nevent.setName(\"iPhone 13 Pro Max\");\nproductViewEventHandler.handle(event);\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "c3ce584e-bff0-22b7-564b-d19a122194ac",
            "ancestors": [
              "92ff62d8-55e2-8899-2c46-6efd68ea8c74"
            ],
            "type": "function",
            "description": "is triggered when a `ProductSaleableEvent` occurs and updates the `saleable` status of the related product in the repository, if it was not saleable before.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductSaleableEvent",
                "description": "ProductSaleableEvent object that contains information about the sale of a product, including its ID.\n\n* `event.getId()`: This property returns the unique identifier of the event.\n* `productRepository.exists(event.getId())`: This method checks if a product with the specified ID exists in the repository.\n* `product = productRepository.findOne(event.getId())`: This method retrieves the product associated with the specified ID from the repository.\n* `!product.isSaleable()`: This property indicates whether the product is saleable or not.\n* `product.setSaleable(true)`: This method sets the saleability of the product to true.\n* `productRepository.save(product)`: This method saves the modified product in the repository.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventHandler\n    public void handle(ProductSaleableEvent event) {\n        LOG.info(\"ProductSaleableEvent: [{}]\", event.getId());\n        if (productRepository.exists(event.getId())) {\n            Product product = productRepository.findOne(event.getId());\n            if (!product.isSaleable()) {\n                product.setSaleable(true);\n                productRepository.save(product);\n            }\n        }\n    }\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "8b9607be-75ff-6db1-c54a-816edadf5a04",
            "ancestors": [
              "92ff62d8-55e2-8899-2c46-6efd68ea8c74"
            ],
            "type": "function",
            "description": "updates a product's saleability status based on an event, logging and saving changes to the repository if necessary.",
            "params": [
              {
                "name": "event",
                "type_name": "ProductUnsaleableEvent",
                "description": "\"ProductUnsaleableEvent\" object that contains information about an unsaleable product, which is used to determine if the product is still saleable and to update its saleability status in the database.\n\n* `event.getId()` returns the unique identifier of the event.\n* `productRepository.exists(event.getId())` checks if a product with the matching ID exists in the repository.\n* `product = productRepository.findOne(event.getId())` retrieves the product associated with the ID from the repository.\n* `if (product.isSaleable())` checks if the product is saleable, based on its current state.\n* `product.setSaleable(false)` updates the saleability status of the product to false.\n* `productRepository.save(product)` saves the updated product in the repository.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@EventHandler\n    public void handle(ProductUnsaleableEvent event) {\n        LOG.info(\"ProductUnsaleableEvent: [{}]\", event.getId());\n\n        if (productRepository.exists(event.getId())) {\n            Product product = productRepository.findOne(event.getId());\n            if (product.isSaleable()) {\n                product.setSaleable(false);\n                productRepository.save(product);\n            }\n        }\n    }\n",
              "description": ""
            },
            "name": "handle",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "a033c09f-707c-ba99-434c-d75a8997282a",
            "ancestors": [
              "92ff62d8-55e2-8899-2c46-6efd68ea8c74"
            ],
            "type": "function",
            "description": "clears the view before starting an event replay.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ProductViewEventHandler eventHandler = new ProductViewEventHandler();\neventHandler.beforeReplay();\n// Replay events here\neventHandler.afterReplay();\n",
              "description": ""
            },
            "name": "beforeReplay",
            "location": {
              "start": 57,
              "insert": 57,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7fe38bd1-255e-66b8-4c48-bea3bc485e0c",
            "ancestors": [
              "92ff62d8-55e2-8899-2c46-6efd68ea8c74"
            ],
            "type": "function",
            "description": "logs an event to the system log with the message \"Event Replay has FINISHED.\"",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate ProductViewEventHandler productViewEventHandler;\n\npublic void handleProductAddedEvent(ProductAddedEvent event) {\n    productViewEventHandler.handle(event);\n}\n",
              "description": "\nIn this example, the `handleProductAddedEvent` method is responsible for handling a `ProductAddedEvent` and passing it to the `productViewEventHandler` for further processing. The `afterReplay()` method is called after the event replay has finished, allowing the system to perform any cleanup or other necessary tasks."
            },
            "name": "afterReplay",
            "location": {
              "start": 61,
              "insert": 61,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ed9fe9ce-b086-2f91-1148-ea5366e45f33",
            "ancestors": [
              "92ff62d8-55e2-8899-2c46-6efd68ea8c74"
            ],
            "type": "function",
            "description": "logs an error message to the log when event replay fails.",
            "params": [
              {
                "name": "cause",
                "type_name": "Throwable",
                "description": "Throwable that caused the event replay to fail, providing additional information about the error.\n\n* The type of Throwable is specified as `Throwable`.\n* The cause of the failure is reported to the error log using the `LOG.error()` method with a message indicating that the event replay has failed.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) throws Exception {\n        ProductViewEventHandler eventHandler = new ProductViewEventHandler();\n        Throwable cause = new Exception(\"test\");\n        eventHandler.onReplayFailed(cause);\n    }\n}\n",
              "description": ""
            },
            "name": "onReplayFailed",
            "location": {
              "start": 65,
              "insert": 65,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ProductRepository.java",
    "path": "query-side/src/main/java/com/soagrowers/productquery/repository/ProductRepository.java",
    "content": {
      "structured": {
        "description": "An interface ProductRepository, which is a Spring Data repository for the Product entity. The interface provides a method findBySaleable() that takes a boolean parameter saleable and returns a list of products that are saleable.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.soagrowers.productquery.repository.ProductRepository Pages: 1 -->\n<svg width=\"225pt\" height=\"170pt\"\n viewBox=\"0.00 0.00 225.00 170.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 166)\">\n<title>com.soagrowers.productquery.repository.ProductRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"217,-30 0,-30 0,0 217,0 217,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productquery.repository.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ProductRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"interfacecom_1_1soagrowers_1_1productquery_1_1repository_1_1ReadOnlyPagingAndSortingRepository.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"217,-96 0,-96 0,-66 217,-66 217,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.soagrowers.productquery.repository.</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">ReadOnlyPagingAndSortingRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-55.54C108.5,-46.96 108.5,-37.61 108.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-55.8 108.5,-65.8 112,-55.8 105,-55.8\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"186,-162 31,-162 31,-132 186,-132 186,-162\"/>\n<text text-anchor=\"start\" x=\"39\" y=\"-150\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PagingAndSortingRepository</text>\n<text text-anchor=\"middle\" x=\"108.5\" y=\"-139\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">&lt; Product, String &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M108.5,-121.54C108.5,-112.96 108.5,-103.61 108.5,-96.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"105,-121.8 108.5,-131.8 112,-121.8 105,-121.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "216b0070-bc0b-aebb-d043-6d31bf98d8bd",
            "ancestors": [],
            "type": "function",
            "description": "extends ReadOnlyPagingAndSortingRepository and provides a method to find products based on their saleability status.",
            "name": "ProductRepository",
            "location": {
              "start": 13,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 9,
                "end": 12
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 3
          }
        ]
      }
    }
  }
]